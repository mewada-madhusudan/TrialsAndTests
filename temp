import os
import subprocess
import sys

def run_pylint_executable(project_path, config_path=None):
    """
    Run the pylint executable using subprocess with proper path handling.
    
    Args:
        project_path: Path to the project to analyze
        config_path: Optional path to pylint config file
    
    Returns:
        Tuple of (return_code, stdout, stderr)
    """
    # 1. Get the directory where this script is located
    script_dir = os.path.dirname(os.path.abspath(__file__))
    
    # 2. Build the path to the executable (assuming it's in the same directory)
    exe_name = "pylint_runner.exe" if sys.platform == "win32" else "pylint_runner"
    exe_path = os.path.join(script_dir, exe_name)
    
    # 3. Ensure the path exists
    if not os.path.exists(exe_path):
        raise FileNotFoundError(f"Pylint executable not found at: {exe_path}")
    
    # 4. Build the command
    cmd = [exe_path, project_path]
    if config_path:
        cmd.append(config_path)
    
    # 5. Run the command with full error handling
    try:
        # Use run instead of call for better control
        result = subprocess.run(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            check=False  # Don't raise exception on non-zero return code
        )
        return result.returncode, result.stdout, result.stderr
    except Exception as e:
        return -1, "", f"Error executing pylint: {str(e)}"

def main():
    """Example usage."""
    # Example project path - replace with your actual path
    project_path = r"C:\path\to\your\project"
    
    # Optional config path
    config_path = None  # r"C:\path\to\your\pylintrc" if needed
    
    # Run pylint
    return_code, stdout, stderr = run_pylint_executable(project_path, config_path)
    
    # Handle results
    if return_code == 0:
        print("Pylint analysis completed successfully.")
        print("\nResults:")
        print(stdout)
    else:
        print(f"Pylint analysis failed with code {return_code}")
        if stderr:
            print(f"\nError details:\n{stderr}")

if __name__ == "__main__":
    main()
