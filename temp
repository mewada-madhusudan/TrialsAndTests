import getpass
import os
import sqlite3
import sys
from PyQt6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                             QPushButton, QLabel, QLineEdit, QGridLayout, QFrame, QMessageBox, QProgressBar)
from PyQt6.QtGui import QPixmap, QIcon
from PyQt6.QtCore import Qt, QThread, pyqtSignal


def setup_database():
    conn = sqlite3.connect('app_launcher.db')
    c = conn.cursor()

    # Create applications table
    c.execute('''CREATE TABLE IF NOT EXISTS applications
                 (id INTEGER PRIMARY KEY, name TEXT, path TEXT)''')

    # Create user_access table
    c.execute('''CREATE TABLE IF NOT EXISTS user_access
                 (id INTEGER PRIMARY KEY, username TEXT, app_id INTEGER,
                  FOREIGN KEY(app_id) REFERENCES applications(id))''')

    # Insert sample data (you would replace this with your actual data)
    c.execute(
        "INSERT OR IGNORE INTO applications VALUES (1, 'ExcelReportNinja_GFITECH_37', '\\\\Asiapac.ad.jpmorganchase.com\\corp2\\COFI\\APCORP2COFISHARE00002\\STO PyHub\\UAT\\ExcelReportNinja_GFITECH_37\\ExcelReportNinja_GFITECH_37.exe')")
    c.execute("INSERT OR IGNORE INTO applications VALUES (2, 'App 2', '\\\\shared_drive\\path\\to\\app2.exe')")
    c.execute("INSERT OR IGNORE INTO user_access VALUES (1, 'I811963', 1)")
    c.execute("INSERT OR IGNORE INTO user_access VALUES (2, 'I8', 2)")

    conn.commit()
    conn.close()


class InstallThread(QThread):
    progress = pyqtSignal(int)
    finished = pyqtSignal(bool, str)

    def __init__(self, source_path, dest_path):
        super().__init__()
        self.source_path = source_path
        self.dest_path = dest_path

    def run(self):
        try:
            os.makedirs(os.path.dirname(self.dest_path), exist_ok=True)
            total_size = os.path.getsize(self.source_path)
            copied_size = 0
            with open(self.source_path, 'rb') as src, open(self.dest_path, 'wb') as dst:
                while True:
                    chunk = src.read(1024 * 1024)  # 1MB chunks
                    if not chunk:
                        break
                    dst.write(chunk)
                    copied_size += len(chunk)
                    self.progress.emit(int(copied_size * 100 / total_size))
            self.finished.emit(True, "Installation completed successfully!")
        except Exception as e:
            self.finished.emit(False, f"Installation failed: {str(e)}")


class ApplicationTile(QFrame):
    def __init__(self, app_name, shared_path, app_description, parent=None):
        super().__init__(parent)
        self.app_name = app_name
        self.shared_path = shared_path
        self.local_path = os.path.join(os.path.expanduser('~'), 'InstalledApps', f"{app_name}.exe")
        layout = QVBoxLayout()
        self.setLayout(layout)

        icon_label = QLabel()
        icon_label.setPixmap(QPixmap("path_to_app_icon.png").scaled(50, 50, Qt.AspectRatioMode.KeepAspectRatio))
        layout.addWidget(icon_label, alignment=Qt.AlignmentFlag.AlignLeft)

        self.name_label = QLabel(app_name)
        self.name_label.setStyleSheet("font-weight: bold; font-size: 16px;")
        layout.addWidget(self.name_label)

        self.description_label = QLabel(app_description)
        self.description_label.setStyleSheet("color: #666;")
        layout.addWidget(self.description_label)

        button_layout = QHBoxLayout()
        self.install_launch_button = QPushButton("Install/Launch")
        self.uninstall_button = QPushButton("Uninstall")
        button_layout.addWidget(self.install_launch_button)
        self.install_launch_button.clicked.connect(self.install_application)
        button_layout.addWidget(self.uninstall_button)
        self.progressBar = QProgressBar(self)
        self.progressBar.setVisible(False)
        layout.addWidget(self.progressBar)

        self.setLayout(layout)
        self.setFixedSize(200, 150)
        self.update_button_states()
        layout.addLayout(button_layout)

        self.setStyleSheet("""
            ApplicationTile {
                background-color: white;
                border-radius: 10px;
                padding: 15px;
                margin: 5px;
            }
            QPushButton {
                background-color: #6c5ce7;
                color: white;
                border: none;
                padding: 5px 10px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #5b4bc7;
            }
            QProgressBar {
                border: 2px solid grey;
                border-radius: 5px;
                text-align: center;
            }
            QProgressBar::chunk {
                background-color: #4CAF50;
                width: 10px;
            }
        """)

    def install_application(self, app_name):
        self.install_thread = InstallThread(self.shared_path, self.local_path)
        self.install_thread.progress.connect(self.update_progress)
        self.install_thread.finished.connect(self.installation_finished)

        self.progressBar.setVisible(True)
        # self.installButton.setEnabled(False)
        self.install_thread.start()

    def update_progress(self, value):
        self.progressBar.setValue(value)

    def installation_finished(self, success, message):
        self.progressBar.setVisible(False)
        if success:
            QMessageBox.information(self, 'Success', message)
        else:
            QMessageBox.critical(self, 'Error', message)
        self.update_button_states()

    def launch_app(self):
        try:
            os.startfile(self.local_path)
        except Exception as e:
            QMessageBox.critical(self, 'Error', f'Failed to launch application: {str(e)}')

    def is_app_installed(self):
        return os.path.exists(self.local_path)

    def update_button_states(self):
        is_installed = self.is_app_installed()
        # self.install_launch_button.setEnabled(not is_installed)
        # self.install_launch_button.setEnabled(is_installed)

    def uninstall_application(self, app_name):
        # TODO: Implement removing exe from user machine
        pass


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        # self.username = getpass.getuser()  # Get Windows username
        self.setWindowTitle("Application Launcher")
        self.setGeometry(100, 100, 1000, 600)
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f5f6fa;
            }
        """)

        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QHBoxLayout(central_widget)

        # Sidebar
        sidebar = QWidget()
        sidebar.setStyleSheet("""
            QWidget {
                background-color: #2c3e50;
                color: white;
            }
            QLabel {
                padding: 5px;
            }
            QPushButton {
                background-color: #6c5ce7;
                color: white;
                border: none;
                padding: 10px;
                margin: 10px 5px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #5b4bc7;
            }
        """)
        sidebar_layout = QVBoxLayout(sidebar)

        profile_pic = QLabel()
        pixmap = QPixmap("path_to_profile_pic.jpg").scaled(150, 150, Qt.AspectRatioMode.KeepAspectRatio,
                                                           Qt.TransformationMode.SmoothTransformation)
        profile_pic.setPixmap(pixmap)
        profile_pic.setStyleSheet("border-radius: 75px; border: 2px solid white;")
        sidebar_layout.addWidget(profile_pic, alignment=Qt.AlignmentFlag.AlignCenter)

        sidebar_layout.addWidget(QLabel("SID: SID Value"))
        sidebar_layout.addWidget(QLabel("Name: RAhul"))
        sidebar_layout.addWidget(QLabel("LOB: COPORATE"))
        sidebar_layout.addStretch()
        exit_button = QPushButton("EXIT")
        exit_button.clicked.connect(self.close)
        sidebar_layout.addWidget(exit_button)

        # Main content area
        content_area = QWidget()
        content_layout = QVBoxLayout(content_area)

        # Search bar
        search_bar = QLineEdit()
        search_bar.setPlaceholderText("Search")
        search_bar.setStyleSheet("""
            QLineEdit {
                border: 1px solid #ddd;
                border-radius: 20px;
                padding: 10px 15px;
                font-size: 16px;
                margin-bottom: 20px;
            }
        """)
        content_layout.addWidget(search_bar)

        # Applications label
        app_label = QLabel("Applications")
        app_label.setStyleSheet("font-size: 24px; font-weight: bold; margin-bottom: 10px;")
        content_layout.addWidget(app_label)

        # Application grid
        self.app_grid = QGridLayout()
        self.app_grid.setSpacing(20)
        content_layout.addLayout(self.app_grid)

        main_layout.addWidget(sidebar, 1)
        main_layout.addWidget(content_area, 3)

        self.load_applications(self.app_grid)

    def load_applications(self, layout):
        # This method would typically query the database and create ApplicationTiles
        # For demonstration, we'll create some dummy tiles
        conn = sqlite3.connect('app_launcher.db')
        c = conn.cursor()

        # Fetch applications the user has access to
        c.execute('''SELECT a.name, a.path FROM applications a
                     JOIN user_access ua ON a.id = ua.app_id
                     WHERE ua.username = ?''', ('I811963',))

        applications = c.fetchall()

        conn.close()

        row = 0
        col = 0
        for app_name, shared_path in applications:
            tile = ApplicationTile(app_name, shared_path, "application short description")
            layout.addWidget(tile, row, col)
            col += 1
            if col > 2:  # 3 tiles per row
                col = 0
                row += 1
        # for i in range(6):
        #     tile = ApplicationTile(f"ExcelReportNinja_GFITECH_37", 'P:\\UAT\\ExcelReportNinja_GFITECH_37',
        #                            "application short description")
        #     self.app_grid.addWidget(tile, i // 3, i % 3)

    def check_user_access(self, app_name):
        # TODO: Implement database check for user access
        pass


if __name__ == "__main__":
    setup_database()
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())
import getpass
import os
import sqlite3
import sys
from PyQt6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                             QPushButton, QLabel, QLineEdit, QGridLayout, QFrame, QMessageBox, QProgressBar)
from PyQt6.QtGui import QPixmap, QIcon
from PyQt6.QtCore import Qt, QThread, pyqtSignal


def setup_database():
    conn = sqlite3.connect('app_launcher.db')
    c = conn.cursor()

    # Create applications table
    c.execute('''CREATE TABLE IF NOT EXISTS applications
                 (id INTEGER PRIMARY KEY, name TEXT, path TEXT)''')

    # Create user_access table
    c.execute('''CREATE TABLE IF NOT EXISTS user_access
                 (id INTEGER PRIMARY KEY, username TEXT, app_id INTEGER,
                  FOREIGN KEY(app_id) REFERENCES applications(id))''')

    # Insert sample data (you would replace this with your actual data)
    c.execute(
        "INSERT OR IGNORE INTO applications VALUES (1, 'ExcelReportNinja_GFITECH_37', '\\\\Asiapac.ad.jpmorganchase.com\\corp2\\COFI\\APCORP2COFISHARE00002\\STO PyHub\\UAT\\ExcelReportNinja_GFITECH_37\\ExcelReportNinja_GFITECH_37.exe')")
    c.execute("INSERT OR IGNORE INTO applications VALUES (2, 'App 2', '\\\\shared_drive\\path\\to\\app2.exe')")
    c.execute("INSERT OR IGNORE INTO user_access VALUES (1, 'I811963', 1)")
    c.execute("INSERT OR IGNORE INTO user_access VALUES (2, 'I8', 2)")

    conn.commit()
    conn.close()


class InstallThread(QThread):
    progress = pyqtSignal(int)
    finished = pyqtSignal(bool, str)

    def __init__(self, source_path, dest_path):
        super().__init__()
        self.source_path = source_path
        self.dest_path = dest_path

    def run(self):
        try:
            os.makedirs(os.path.dirname(self.dest_path), exist_ok=True)
            total_size = os.path.getsize(self.source_path)
            copied_size = 0
            with open(self.source_path, 'rb') as src, open(self.dest_path, 'wb') as dst:
                while True:
                    chunk = src.read(1024 * 1024)  # 1MB chunks
                    if not chunk:
                        break
                    dst.write(chunk)
                    copied_size += len(chunk)
                    self.progress.emit(int(copied_size * 100 / total_size))
            self.finished.emit(True, "Installation completed successfully!")
        except Exception as e:
            self.finished.emit(False, f"Installation failed: {str(e)}")


class ApplicationTile(QFrame):
    def __init__(self, app_name, shared_path, app_description, parent=None):
        super().__init__(parent)
        self.app_name = app_name
        self.shared_path = shared_path
        self.local_path = os.path.join(os.path.expanduser('~'), 'InstalledApps', f"{app_name}.exe")
        layout = QVBoxLayout()
        self.setLayout(layout)

        icon_label = QLabel()
        icon_label.setPixmap(QPixmap("path_to_app_icon.png").scaled(50, 50, Qt.AspectRatioMode.KeepAspectRatio))
        layout.addWidget(icon_label, alignment=Qt.AlignmentFlag.AlignLeft)

        self.name_label = QLabel(app_name)
        self.name_label.setStyleSheet("font-weight: bold; font-size: 16px;")
        layout.addWidget(self.name_label)

        self.description_label = QLabel(app_description)
        self.description_label.setStyleSheet("color: #666;")
        layout.addWidget(self.description_label)

        button_layout = QHBoxLayout()
        self.install_launch_button = QPushButton("Install/Launch")
        self.uninstall_button = QPushButton("Uninstall")
        button_layout.addWidget(self.install_launch_button)
        self.install_launch_button.clicked.connect(self.install_application)
        button_layout.addWidget(self.uninstall_button)
        self.progressBar = QProgressBar(self)
        self.progressBar.setVisible(False)
        layout.addWidget(self.progressBar)

        self.setLayout(layout)
        self.setFixedSize(200, 150)
        self.update_button_states()
        layout.addLayout(button_layout)

        self.setStyleSheet("""
            ApplicationTile {
                background-color: white;
                border-radius: 10px;
                padding: 15px;
                margin: 5px;
            }
            QPushButton {
                background-color: #6c5ce7;
                color: white;
                border: none;
                padding: 5px 10px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #5b4bc7;
            }
            QProgressBar {
                border: 2px solid grey;
                border-radius: 5px;
                text-align: center;
            }
            QProgressBar::chunk {
                background-color: #4CAF50;
                width: 10px;
            }
        """)

    def install_application(self, app_name):
        self.install_thread = InstallThread(self.shared_path, self.local_path)
        self.install_thread.progress.connect(self.update_progress)
        self.install_thread.finished.connect(self.installation_finished)

        self.progressBar.setVisible(True)
        # self.installButton.setEnabled(False)
        self.install_thread.start()

    def update_progress(self, value):
        self.progressBar.setValue(value)

    def installation_finished(self, success, message):
        self.progressBar.setVisible(False)
        if success:
            QMessageBox.information(self, 'Success', message)
        else:
            QMessageBox.critical(self, 'Error', message)
        self.update_button_states()

    def launch_app(self):
        try:
            os.startfile(self.local_path)
        except Exception as e:
            QMessageBox.critical(self, 'Error', f'Failed to launch application: {str(e)}')

    def is_app_installed(self):
        return os.path.exists(self.local_path)

    def update_button_states(self):
        is_installed = self.is_app_installed()
        # self.install_launch_button.setEnabled(not is_installed)
        # self.install_launch_button.setEnabled(is_installed)

    def uninstall_application(self, app_name):
        # TODO: Implement removing exe from user machine
        pass


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        # self.username = getpass.getuser()  # Get Windows username
        self.setWindowTitle("Application Launcher")
        self.setGeometry(100, 100, 1000, 600)
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f5f6fa;
            }
        """)

        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QHBoxLayout(central_widget)

        # Sidebar
        sidebar = QWidget()
        sidebar.setStyleSheet("""
            QWidget {
                background-color: #2c3e50;
                color: white;
            }
            QLabel {
                padding: 5px;
            }
            QPushButton {
                background-color: #6c5ce7;
                color: white;
                border: none;
                padding: 10px;
                margin: 10px 5px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #5b4bc7;
            }
        """)
        sidebar_layout = QVBoxLayout(sidebar)

        profile_pic = QLabel()
        pixmap = QPixmap("path_to_profile_pic.jpg").scaled(150, 150, Qt.AspectRatioMode.KeepAspectRatio,
                                                           Qt.TransformationMode.SmoothTransformation)
        profile_pic.setPixmap(pixmap)
        profile_pic.setStyleSheet("border-radius: 75px; border: 2px solid white;")
        sidebar_layout.addWidget(profile_pic, alignment=Qt.AlignmentFlag.AlignCenter)

        sidebar_layout.addWidget(QLabel("SID: SID Value"))
        sidebar_layout.addWidget(QLabel("Name: RAhul"))
        sidebar_layout.addWidget(QLabel("LOB: COPORATE"))
        sidebar_layout.addStretch()
        exit_button = QPushButton("EXIT")
        exit_button.clicked.connect(self.close)
        sidebar_layout.addWidget(exit_button)

        # Main content area
        content_area = QWidget()
        content_layout = QVBoxLayout(content_area)

        # Search bar
        search_bar = QLineEdit()
        search_bar.setPlaceholderText("Search")
        search_bar.setStyleSheet("""
            QLineEdit {
                border: 1px solid #ddd;
                border-radius: 20px;
                padding: 10px 15px;
                font-size: 16px;
                margin-bottom: 20px;
            }
        """)
        content_layout.addWidget(search_bar)

        # Applications label
        app_label = QLabel("Applications")
        app_label.setStyleSheet("font-size: 24px; font-weight: bold; margin-bottom: 10px;")
        content_layout.addWidget(app_label)

        # Application grid
        self.app_grid = QGridLayout()
        self.app_grid.setSpacing(20)
        content_layout.addLayout(self.app_grid)

        main_layout.addWidget(sidebar, 1)
        main_layout.addWidget(content_area, 3)

        self.load_applications(self.app_grid)

    def load_applications(self, layout):
        # This method would typically query the database and create ApplicationTiles
        # For demonstration, we'll create some dummy tiles
        conn = sqlite3.connect('app_launcher.db')
        c = conn.cursor()

        # Fetch applications the user has access to
        c.execute('''SELECT a.name, a.path FROM applications a
                     JOIN user_access ua ON a.id = ua.app_id
                     WHERE ua.username = ?''', ('I811963',))

        applications = c.fetchall()

        conn.close()

        row = 0
        col = 0
        for app_name, shared_path in applications:
            tile = ApplicationTile(app_name, shared_path, "application short description")
            layout.addWidget(tile, row, col)
            col += 1
            if col > 2:  # 3 tiles per row
                col = 0
                row += 1
        # for i in range(6):
        #     tile = ApplicationTile(f"ExcelReportNinja_GFITECH_37", 'P:\\UAT\\ExcelReportNinja_GFITECH_37',
        #                            "application short description")
        #     self.app_grid.addWidget(tile, i // 3, i % 3)

    def check_user_access(self, app_name):
        # TODO: Implement database check for user access
        pass


if __name__ == "__main__":
    setup_database()
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())
