import requests
import json

class TableauMetadataClient:
    def __init__(self, server_url, site_id, username, password):
        """
        Initialize Tableau Metadata API Client
        """
        self.server_url = server_url.rstrip('/')
        self.site_id = site_id
        self.token = None
        self.site_content_url = None
        
        # Authenticate
        self.authenticate(username, password)
    
    def authenticate(self, username, password):
        """
        Authenticate and get access token
        """
        auth_endpoint = f"{self.server_url}/api/3.21/auth/signin"
        
        payload = {
            "credentials": {
                "name": username,
                "password": password,
                "site": {
                    "contentUrl": self.site_id
                }
            }
        }
        
        response = requests.post(auth_endpoint, json=payload)
        response.raise_for_status()
        
        auth_response = response.json()
        self.token = auth_response['credentials']['token']
        self.site_content_url = auth_response['credentials']['site']['contentUrl']
    
    def query_metadata(self, graphql_query):
        """
        Execute a GraphQL query against Tableau's Metadata API
        
        Args:
            graphql_query (str): GraphQL query to execute
        
        Returns:
            dict: Query results
        """
        metadata_endpoint = f"{self.server_url}/api/metadata/v2/graphql"
        
        headers = {
            'X-Tableau-Auth': self.token,
            'Content-Type': 'application/json'
        }
        
        payload = {
            'query': graphql_query
        }
        
        response = requests.post(metadata_endpoint, 
                                 headers=headers, 
                                 data=json.dumps(payload))
        
        response.raise_for_status()
        return response.json()
    
    def get_workbook_details(self, workbook_name=None, project_name=None):
        """
        Retrieve detailed information about workbooks
        
        Args:
            workbook_name (str, optional): Specific workbook name
            project_name (str, optional): Project name to filter workbooks
        
        Returns:
            dict: Workbook metadata
        """
        # Base GraphQL query to fetch workbook details
        query = '''
        query WorkbookDetails($workbookName: String, $projectName: String) {
            workbooks(filter: {
                name: $workbookName
                projectName: $projectName
            }) {
                id
                name
                projectName
                views {
                    id
                    name
                }
                datasources {
                    id
                    name
                    fields {
                        name
                        description
                        dataType
                    }
                }
            }
        }
        '''
        
        variables = {}
        if workbook_name:
            variables['workbookName'] = workbook_name
        if project_name:
            variables['projectName'] = project_name
        
        payload = {
            'query': query,
            'variables': variables
        }
        
        headers = {
            'X-Tableau-Auth': self.token,
            'Content-Type': 'application/json'
        }
        
        metadata_endpoint = f"{self.server_url}/api/metadata/v2/graphql"
        
        response = requests.post(metadata_endpoint, 
                                 headers=headers, 
                                 data=json.dumps(payload))
        
        response.raise_for_status()
        return response.json()
    
    def get_datasource_fields(self, datasource_name=None, project_name=None):
        """
        Retrieve fields from datasources that might be used as filters
        
        Args:
            datasource_name (str, optional): Specific datasource name
            project_name (str, optional): Project name to filter datasources
        
        Returns:
            dict: Datasource fields metadata
        """
        query = '''
        query DatasourceFields($datasourceName: String, $projectName: String) {
            datasources(filter: {
                name: $datasourceName
                projectName: $projectName
            }) {
                name
                projectName
                fields {
                    name
                    description
                    dataType
                    isCalculated
                    defaultAggregate
                }
            }
        }
        '''
        
        variables = {}
        if datasource_name:
            variables['datasourceName'] = datasource_name
        if project_name:
            variables['projectName'] = project_name
        
        return self.query_metadata(query)
    
    def logout(self):
        """
        Logout and invalidate the session token
        """
        if not self.token:
            return
        
        headers = {
            'X-Tableau-Auth': self.token
        }
        
        logout_endpoint = f"{self.server_url}/api/3.21/auth/signout"
        
        try:
            requests.post(logout_endpoint, headers=headers)
        except requests.RequestException:
            pass
        finally:
            self.token = None

# Example usage
def main():
    try:
        # Replace with your Tableau server details
        client = TableauMetadataClient(
            server_url='https://your-tableau-server.com',
            site_id='your-site-id',
            username='your-username',
            password='your-password'
        )
        
        # Get all workbooks
        workbooks_response = client.get_workbook_details()
        print("Workbooks:")
        for workbook in workbooks_response.get('data', {}).get('workbooks', []):
            print(f"Workbook: {workbook['name']} (Project: {workbook['projectName']})")
            
            # Get datasource fields for each workbook
            for datasource in workbook.get('datasources', []):
                print(f"  Datasource: {datasource['name']}")
                for field in datasource.get('fields', []):
                    print(f"    Field: {field['name']} (Type: {field['dataType']})")
    
    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        client.logout()

if __name__ == '__main__':
    main()
