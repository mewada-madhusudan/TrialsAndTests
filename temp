class AppTileWidget(QFrame):
    def __init__(self, name, description, parent=None):
        super().__init__(parent)
        self.setObjectName("appTile")
        self.setFixedHeight(100)
        self.is_selected = False
        self.setup_ui(name, description)
        
    def setup_ui(self, name, description):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(16, 12, 16, 12)
        layout.setSpacing(4)

        # App icon/emoji (placeholder)
        icon_label = QLabel("ðŸ”¹")
        icon_label.setProperty("appIcon", True)

        # App name with icon in horizontal layout
        name_layout = QHBoxLayout()
        name_layout.setSpacing(8)
        name_layout.addWidget(icon_label)

        name_label = QLabel(name)
        name_label.setProperty("appName", True)
        name_label.setWordWrap(True)
        name_layout.addWidget(name_label)
        name_layout.addStretch()

        # Description
        desc_label = QLabel(description)
        desc_label.setProperty("appDescription", True)
        desc_label.setWordWrap(True)

        layout.addLayout(name_layout)
        layout.addWidget(desc_label)
        layout.addStretch()
        
    def set_selected(self, selected):
        self.is_selected = selected
        if selected:
            self.setProperty("selected", True)
        else:
            self.setProperty("selected", False)
        self.style().unpolish(self)
        self.style().polish(self)
        self.update()

# Modify the update_app_list method in AccessControlDialog
def update_app_list(self):
    self.app_list.clear()
    for _, row in self.df.iterrows():
        item = QListWidgetItem(self.app_list)
        tile_widget = AppTileWidget(row['application_name'], row['description'])
        item.setSizeHint(tile_widget.sizeHint())
        self.app_list.setItemWidget(item, tile_widget)
        item.setData(Qt.ItemDataRole.UserRole, row['application_name'])
    
    # Connect to item selection change
    self.app_list.itemSelectionChanged.connect(self.handle_selection_changed)

# Add this new method to AccessControlDialog
def handle_selection_changed(self):
    # Update all tiles to unselected state first
    for i in range(self.app_list.count()):
        item = self.app_list.item(i)
        tile_widget = self.app_list.itemWidget(item)
        tile_widget.set_selected(False)
    
    # Set the selected state for the current item
    current_item = self.app_list.currentItem()
    if current_item:
        tile_widget = self.app_list.itemWidget(current_item)
        tile_widget.set_selected(True)

# Add these styles to the apply_styles method in AccessControlDialog
def apply_styles(self):
    # Add this to your existing stylesheet
    additional_styles = """
        QFrame#appTile[selected="true"] {
            background-color: #e3f2fd;
            border: 1px solid #1976d2;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        QFrame#appTile[selected="true"]:hover {
            background-color: #e3f2fd;
            border: 1px solid #1565c0;
        }
        QFrame#appTile {
            background-color: white;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            margin: 4px 8px;
        }
        QFrame#appTile:hover {
            background-color: #f8f9fa;
            border: 1px solid #1976d2;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
    """
    current_style = self.styleSheet()
    self.setStyleSheet(current_style + additional_styles)
