using ClosedXML.Excel;
using System;
using System.Collections.Generic;
using System.Linq;

public class FormulaAnalyzer
{
    public class FormulaInfo
    {
        public string Sheet { get; set; }
        public string CellReference { get; set; }
        public string Formula { get; set; }
        public string Pattern { get; set; }
        public string Classification { get; set; }
    }

    public class AnalysisResult
    {
        public List<FormulaInfo> SingleCellFormulas { get; set; } = new();
        public List<FormulaInfo> RowwiseDraggedFormulas { get; set; } = new();
        public List<FormulaInfo> ColumnwiseDraggedFormulas { get; set; } = new();
    }

    public AnalysisResult AnalyzeExcelFormulas(string filePath)
    {
        var result = new AnalysisResult();

        using (var workbook = new XLWorkbook(filePath))
        {
            foreach (var worksheet in workbook.Worksheets)
            {
                // Skip sheets that are pivot tables
                if (IsPivotSheet(worksheet)) continue;

                var usedRange = worksheet.RangeUsed();
                if (usedRange == null) continue;

                var formulaCells = usedRange.Cells()
                    .Where(cell => cell.HasFormula)
                    .ToList();

                foreach (var cell in formulaCells)
                {
                    var formula = cell.FormulaA1;
                    var pattern = ExtractFormulaPattern(formula);
                    var classification = ClassifyFormula(worksheet, cell, pattern);

                    var formulaInfo = new FormulaInfo
                    {
                        Sheet = worksheet.Name,
                        CellReference = cell.Address.ToString(),
                        Formula = formula,
                        Pattern = pattern,
                        Classification = classification
                    };

                    // Add to appropriate list based on classification
                    switch (classification)
                    {
                        case "Single":
                            result.SingleCellFormulas.Add(formulaInfo);
                            break;
                        case "Rowwise":
                            result.RowwiseDraggedFormulas.Add(formulaInfo);
                            break;
                        case "Columnwise":
                            result.ColumnwiseDraggedFormulas.Add(formulaInfo);
                            break;
                    }
                }
            }
        }

        return result;
    }

    private bool IsPivotSheet(IXLWorksheet worksheet)
    {
        // Check if sheet contains pivot tables
        return worksheet.PivotTables.Any();
    }

    private string ExtractFormulaPattern(string formula)
    {
        // Replace cell references with placeholders to identify patterns
        // Example: "=A1+B1" becomes "=[COL][ROW]+[COL][ROW]"
        var pattern = formula;
        
        // Replace absolute references
        pattern = System.Text.RegularExpressions.Regex.Replace(
            pattern, 
            @"\$?[A-Z]+\$?\d+",
            "[REF]");

        return pattern;
    }

    private string ClassifyFormula(IXLWorksheet worksheet, IXLCell cell, string pattern)
    {
        var row = cell.Address.RowNumber;
        var column = cell.Address.ColumnNumber;

        // Check adjacent cells for similar patterns
        bool hasRowPattern = CheckRowPattern(worksheet, row, column, pattern);
        bool hasColumnPattern = CheckColumnPattern(worksheet, row, column, pattern);

        if (hasRowPattern && hasColumnPattern)
            return "Single"; // If pattern exists in both directions, treat as single
        else if (hasRowPattern)
            return "Rowwise";
        else if (hasColumnPattern)
            return "Columnwise";
        else
            return "Single";
    }

    private bool CheckRowPattern(IXLWorksheet worksheet, int row, int column, string basePattern)
    {
        // Check next cell in row
        if (column < worksheet.ColumnsUsed().Count())
        {
            var nextCell = worksheet.Cell(row, column + 1);
            if (nextCell.HasFormula)
            {
                var nextPattern = ExtractFormulaPattern(nextCell.FormulaA1);
                return ArePatternsSimilar(basePattern, nextPattern);
            }
        }
        return false;
    }

    private bool CheckColumnPattern(IXLWorksheet worksheet, int row, int column, string basePattern)
    {
        // Check next cell in column
        if (row < worksheet.RowsUsed().Count())
        {
            var nextCell = worksheet.Cell(row + 1, column);
            if (nextCell.HasFormula)
            {
                var nextPattern = ExtractFormulaPattern(nextCell.FormulaA1);
                return ArePatternsSimilar(basePattern, nextPattern);
            }
        }
        return false;
    }

    private bool ArePatternsSimilar(string pattern1, string pattern2)
    {
        // Compare patterns ignoring specific cell references
        return pattern1.Count(c => c == '[') == pattern2.Count(c => c == '[');
    }

    // Method to export analysis results to a new Excel file
    public void ExportResults(AnalysisResult results, string outputPath)
    {
        using (var workbook = new XLWorkbook())
        {
            // Create worksheet for single cell formulas
            CreateResultSheet(workbook, "SingleCellFormulas", results.SingleCellFormulas);
            
            // Create worksheet for rowwise dragged formulas
            CreateResultSheet(workbook, "RowwiseDragged", results.RowwiseDraggedFormulas);
            
            // Create worksheet for columnwise dragged formulas
            CreateResultSheet(workbook, "ColumnwiseDragged", results.ColumnwiseDraggedFormulas);

            workbook.SaveAs(outputPath);
        }
    }

    private void CreateResultSheet(XLWorkbook workbook, string sheetName, List<FormulaInfo> formulas)
    {
        var worksheet = workbook.Worksheets.Add(sheetName);
        
        // Add headers
        worksheet.Cell("A1").Value = "Sheet";
        worksheet.Cell("B1").Value = "Cell Reference";
        worksheet.Cell("C1").Value = "Formula";
        worksheet.Cell("D1").Value = "Pattern";
        
        // Style headers
        var headerRow = worksheet.Row(1);
        headerRow.Style.Font.Bold = true;
        headerRow.Style.Fill.BackgroundColor = XLColor.LightGray;

        // Add data
        for (int i = 0; i < formulas.Count; i++)
        {
            var row = i + 2;
            worksheet.Cell(row, 1).Value = formulas[i].Sheet;
            worksheet.Cell(row, 2).Value = formulas[i].CellReference;
            worksheet.Cell(row, 3).Value = formulas[i].Formula;
            worksheet.Cell(row, 4).Value = formulas[i].Pattern;
        }

        // Autofit columns
        worksheet.Columns().AdjustToContents();
    }
}

// Example usage
public class Program
{
    public static void Main()
    {
        var analyzer = new FormulaAnalyzer();
        var inputFile = "input.xlsx";
        var outputFile = "formula_analysis.xlsx";

        try
        {
            var results = analyzer.AnalyzeExcelFormulas(inputFile);
            analyzer.ExportResults(results, outputFile);

            Console.WriteLine($"Analysis complete. Found:");
            Console.WriteLine($"- {results.SingleCellFormulas.Count} single cell formulas");
            Console.WriteLine($"- {results.RowwiseDraggedFormulas.Count} rowwise dragged formulas");
            Console.WriteLine($"- {results.ColumnwiseDraggedFormulas.Count} columnwise dragged formulas");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error analyzing file: {ex.Message}");
        }
    }
}
