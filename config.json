import sys
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QVBoxLayout
from PyQt5.QtCore import QPropertyAnimation, QEasingCurve
from PyQt5.QtGui import QColor

class NeonButtonDemo(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        # Set up the main window
        self.setWindowTitle('Neon Button Effect')
        self.setGeometry(100, 100, 400, 300)
        self.setStyleSheet("""
            QWidget {
                background-color: #121212;
            }
        """)

        # Create layout
        layout = QVBoxLayout()
        self.setLayout(layout)

        # Create neon buttons with different colors
        colors = [
            ('#00ff00', 'Green Neon'),
            ('#ff00ff', 'Pink Neon'),
            ('#00ffff', 'Cyan Neon')
        ]

        for color, name in colors:
            button = self.create_neon_button(color, name)
            layout.addWidget(button)

    def create_neon_button(self, color, text):
        button = QPushButton(text)
        
        # Base neon button stylesheet
        button.setStyleSheet(f"""
            QPushButton {{
                background-color: rgba(0, 0, 0, 0);
                color: {color};
                border: 2px solid {color};
                border-radius: 10px;
                padding: 10px;
                font-size: 16px;
                font-weight: bold;
                text-align: center;
                transition: all 0.3s ease;
            }}
            
            QPushButton:hover {{
                background-color: {color};
                color: black;
                box-shadow: 0 0 20px {color}, 0 0 40px {color}, 0 0 60px {color};
            }}
            
            QPushButton:pressed {{
                background-color: {color};
                color: black;
                box-shadow: 0 0 10px {color}, 0 0 20px {color}, 0 0 30px {color};
            }}
        """)
        
        # Add hover animation
        button.enterEvent = self.create_hover_effect(button, color)
        button.leaveEvent = self.create_leave_effect(button, color)
        
        return button

    def create_hover_effect(self, button, color):
        def hover_event(event):
            # Create glowing hover animation
            self.start_glow_animation(button, color, True)
        return hover_event

    def create_leave_effect(self, button, color):
        def leave_event(event):
            # Reset button to original state
            self.start_glow_animation(button, color, False)
        return leave_event

    def start_glow_animation(self, button, color, is_hover):
        # Animate button glow effect
        color_obj = QColor(color)
        
        # Opacity animation
        self.opacity_anim = QPropertyAnimation(button, b"windowOpacity")
        self.opacity_anim.setDuration(300)
        
        if is_hover:
            self.opacity_anim.setStartValue(1.0)
            self.opacity_anim.setEndValue(0.8)
        else:
            self.opacity_anim.setStartValue(0.8)
            self.opacity_anim.setEndValue(1.0)
        
        self.opacity_anim.setEasingCurve(QEasingCurve.InOutQuad)
        self.opacity_anim.start()

def main():
    app = QApplication(sys.argv)
    demo = NeonButtonDemo()
    demo.show()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
