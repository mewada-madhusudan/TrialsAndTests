public class FormulaAnalyzer
{
    private readonly IProgress<string> _progress;
    private int _totalProcessedCells;
    private DateTime _startTime;

    public FormulaAnalyzer(IProgress<string> progress = null)
    {
        _progress = progress ?? new Progress<string>(msg => Console.WriteLine($"{DateTime.Now:HH:mm:ss.fff}: {msg}"));
        _totalProcessedCells = 0;
    }

    public async Task<AnalysisResult> AnalyzeExcelFormulasAsync(string filePath)
    {
        _startTime = DateTime.Now;
        _progress.Report($"Starting analysis of {filePath}");
        var result = new AnalysisResult();
        
        try
        {
            _progress.Report("Loading workbook...");
            using var workbook = new XLWorkbook(filePath, new LoadOptions { LoadDataOnly = true });
            _progress.Report($"Loaded workbook with {workbook.Worksheets.Count} worksheets");

            foreach (var worksheet in workbook.Worksheets)
            {
                await ProcessWorksheet(worksheet, result);
            }

            var duration = DateTime.Now - _startTime;
            _progress.Report($"Analysis complete. Processed {_totalProcessedCells:N0} cells in {duration.TotalMinutes:F1} minutes");
            
            return result;
        }
        catch (Exception ex)
        {
            _progress.Report($"ERROR: {ex.Message}");
            throw;
        }
    }

    private async Task ProcessWorksheet(IXLWorksheet worksheet, AnalysisResult result)
    {
        _progress.Report($"Processing worksheet: {worksheet.Name}");
        
        var usedRange = worksheet.RangeUsed();
        if (usedRange == null)
        {
            _progress.Report($"Worksheet {worksheet.Name} is empty");
            return;
        }

        var firstRow = usedRange.FirstRow().RowNumber();
        var lastRow = usedRange.LastRow().RowNumber();
        var firstCol = usedRange.FirstColumn().ColumnNumber();
        var lastCol = usedRange.LastColumn().ColumnNumber();
        
        var totalRows = lastRow - firstRow + 1;
        var totalCells = (lastRow - firstRow + 1) * (lastCol - firstCol + 1);
        
        _progress.Report($"Range: {firstRow}:{firstCol} to {lastRow}:{lastCol} ({totalCells:N0} cells)");

        int processedRows = 0;
        const int batchSize = 1000;

        for (int startRow = firstRow; startRow <= lastRow; startRow += batchSize)
        {
            var endRow = Math.Min(startRow + batchSize - 1, lastRow);
            var batchRange = worksheet.Range(startRow, firstCol, endRow, lastCol);
            
            var formulaCells = batchRange.Cells()
                .Where(cell => cell.HasFormula)
                .ToList();

            var cellCount = formulaCells.Count;
            _totalProcessedCells += cellCount;
            processedRows += endRow - startRow + 1;

            if (cellCount > 0)
            {
                _progress.Report($"Found {cellCount} formulas in rows {startRow}-{endRow}");
                await ProcessFormulaBatch(formulaCells, worksheet, result);
            }

            var percentComplete = (processedRows * 100.0) / totalRows;
            var elapsed = DateTime.Now - _startTime;
            var cellsPerSecond = _totalProcessedCells / elapsed.TotalSeconds;
            
            _progress.Report($"Progress: {percentComplete:F1}% | Speed: {cellsPerSecond:F0} cells/sec");
            
            // Force GC every 100k rows
            if (processedRows % 100000 == 0)
            {
                _progress.Report("Running garbage collection...");
                GC.Collect();
            }
        }
    }

    private async Task ProcessFormulaBatch(List<IXLCell> cells, IXLWorksheet worksheet, AnalysisResult result)
    {
        foreach (var cell in cells)
        {
            var formula = cell.FormulaA1;
            var pattern = ExtractFormulaPattern(formula);
            var classification = QuickClassifyFormula(worksheet, cell, pattern);

            lock (result)
            {
                var info = new FormulaInfo
                {
                    Sheet = worksheet.Name,
                    CellReference = cell.Address.ToString(),
                    Formula = formula,
                    Pattern = pattern,
                    Classification = classification,
                    IsInPivotSheet = worksheet.PivotTables.Any()
                };

                switch (classification)
                {
                    case "Single": result.SingleCellFormulas.Add(info); break;
                    case "Rowwise": result.RowwiseDraggedFormulas.Add(info); break;
                    case "Columnwise": result.ColumnwiseDraggedFormulas.Add(info); break;
                }
            }
        }
    }

    // Other methods remain the same...
}

// Usage example
class Program
{
    static async Task Main()
    {
        var progress = new Progress<string>(msg => Console.WriteLine(msg));
        var analyzer = new FormulaAnalyzer(progress);

        try
        {
            var results = await analyzer.AnalyzeExcelFormulasAsync("input.xlsx");
            await analyzer.ExportResultsAsync(results, "formula_analysis.xlsx");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fatal error: {ex}");
        }
    }
}
