class AppTileWidget(QFrame):
    def __init__(self, name, description, parent=None):
        super().__init__(parent)
        self.setObjectName("appTile")
        # Remove fixed height to allow dynamic sizing
        self.setMinimumHeight(100)  # Set minimum height instead of fixed
        self.is_selected = False
        self.setup_ui(name, description)
        
    def setup_ui(self, name, description):
        layout = QVBoxLayout(self)
        # Reduce margins to prevent overlap
        layout.setContentsMargins(12, 10, 12, 10)
        layout.setSpacing(4)

        # App icon/emoji (placeholder)
        icon_label = QLabel("ðŸ”¹")
        icon_label.setProperty("appIcon", True)
        icon_label.setFixedWidth(20)  # Fix icon width to prevent layout issues

        # App name with icon in horizontal layout
        name_layout = QHBoxLayout()
        name_layout.setSpacing(8)
        name_layout.addWidget(icon_label)

        name_label = QLabel(name)
        name_label.setProperty("appName", True)
        name_label.setWordWrap(True)
        # Set a maximum width for the name label
        name_label.setMaximumWidth(400)
        name_layout.addWidget(name_label)
        name_layout.addStretch()

        # Description
        desc_label = QLabel(description)
        desc_label.setProperty("appDescription", True)
        desc_label.setWordWrap(True)
        # Set a maximum width for the description label
        desc_label.setMaximumWidth(400)

        layout.addLayout(name_layout)
        layout.addWidget(desc_label)
        layout.addStretch()
        
    def set_selected(self, selected):
        self.is_selected = selected
        self.setProperty("selected", selected)
        self.style().unpolish(self)
        self.style().polish(self)
        self.update()

    def sizeHint(self):
        # Return a reasonable default size
        return QSize(300, 120)

# Update the app_list setup in AccessControlDialog's setup_right_panel method
def setup_right_panel(self):
    # ... (previous code remains the same until app_list setup)

    # Configure the app_list for better spacing
    self.app_list = QListWidget()
    self.app_list.setSpacing(12)  # Increase spacing between items
    self.app_list.setResizeMode(QListWidget.ResizeMode.Adjust)
    self.app_list.setViewMode(QListWidget.ViewMode.ListMode)
    self.app_list.setMinimumWidth(300)
    self.app_list.setUniformItemSizes(False)
    # Add some padding to the list widget
    self.app_list.setStyleSheet("""
        QListWidget {
            background-color: #f5f5f5;
            border: none;
            border-radius: 0px;
            padding: 12px 8px;
        }
        QListWidget::item {
            padding: 4px;
            margin: 4px 0px;
            border: none;
            background-color: transparent;
        }
    """)

    # ... (rest of the code remains the same)

def update_app_list(self):
    self.app_list.clear()
    for _, row in self.df.iterrows():
        item = QListWidgetItem(self.app_list)
        tile_widget = AppTileWidget(row['application_name'], row['description'])
        # Calculate appropriate size for the item based on content
        size = tile_widget.sizeHint()
        # Add some padding to prevent overlap
        size.setHeight(size.height() + 8)
        item.setSizeHint(size)
        self.app_list.setItemWidget(item, tile_widget)
        item.setData(Qt.ItemDataRole.UserRole, row['application_name'])
    
    self.app_list.itemSelectionChanged.connect(self.handle_selection_changed)

# Update the styles
def apply_styles(self):
    # Add this to your existing stylesheet
    additional_styles = """
        QFrame#appTile[selected="true"] {
            background-color: #e3f2fd;
            border: 1px solid #1976d2;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        QFrame#appTile[selected="true"]:hover {
            background-color: #e3f2fd;
            border: 1px solid #1565c0;
        }
        QFrame#appTile {
            background-color: white;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            margin: 2px 4px;  /* Reduced margins */
        }
        QFrame#appTile:hover {
            background-color: #f8f9fa;
            border: 1px solid #1976d2;
        }
        QLabel[appName="true"] {
            font-size: 14px;
            font-weight: bold;
            color: #1976d2;
            margin-bottom: 2px;  /* Reduced margin */
            line-height: 1.2;
        }
        QLabel[appDescription="true"] {
            font-size: 12px;
            color: #666;
            line-height: 1.3;
            margin-top: 2px;  /* Reduced margin */
        }
    """
    current_style = self.styleSheet()
    self.setStyleSheet(current_style + additional_styles)
