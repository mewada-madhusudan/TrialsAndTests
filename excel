using ClosedXML.Excel;
using System;
using System.Collections.Generic;
using System.Linq;

public class FormulaPattern
{
    public string StartCell { get; set; }
    public string Formula { get; set; }
    public string DragDirection { get; set; }
    public List<string> AffectedCells { get; set; }

    public FormulaPattern()
    {
        AffectedCells = new List<string>();
    }
}

public class ExcelFormulaAnalyzer
{
    public List<FormulaPattern> AnalyzeExcelFile(string filePath)
    {
        var patterns = new List<FormulaPattern>();
        
        using (var workbook = new XLWorkbook(filePath))
        {
            var worksheet = workbook.Worksheet(1); // Analyze first worksheet
            
            // Get all cells with formulas
            var formulaCells = worksheet.CellsUsed()
                .Where(cell => cell.HasFormula)
                .OrderBy(cell => cell.Address.RowNumber)
                .ThenBy(cell => cell.Address.ColumnNumber)
                .ToList();

            var processedCells = new HashSet<string>();

            foreach (var cell in formulaCells)
            {
                if (processedCells.Contains(cell.Address.ToString()))
                    continue;

                var pattern = new FormulaPattern
                {
                    StartCell = cell.Address.ToString(),
                    Formula = cell.FormulaA1
                };

                // Check for row-wise pattern
                var rowPattern = FindRowPattern(worksheet, cell, processedCells);
                if (rowPattern.Count > 1)
                {
                    pattern.DragDirection = "Row-wise";
                    pattern.AffectedCells = rowPattern;
                    patterns.Add(pattern);
                    continue;
                }

                // Check for column-wise pattern
                var columnPattern = FindColumnPattern(worksheet, cell, processedCells);
                if (columnPattern.Count > 1)
                {
                    pattern.DragDirection = "Column-wise";
                    pattern.AffectedCells = columnPattern;
                    patterns.Add(pattern);
                    continue;
                }

                // Single cell formula
                pattern.DragDirection = "Single";
                pattern.AffectedCells = new List<string> { cell.Address.ToString() };
                patterns.Add(pattern);
            }
        }

        return patterns;
    }

    private List<string> FindRowPattern(IXLWorksheet worksheet, IXLCell startCell, HashSet<string> processedCells)
    {
        var pattern = new List<string>();
        var currentRow = startCell.Address.RowNumber;
        var column = startCell.Address.ColumnNumber;
        var baseFormula = startCell.FormulaA1;

        while (true)
        {
            var cell = worksheet.Cell(currentRow, column);
            if (!cell.HasFormula || !IsRowWiseFormula(baseFormula, cell.FormulaA1, currentRow - startCell.Address.RowNumber))
                break;

            pattern.Add(cell.Address.ToString());
            processedCells.Add(cell.Address.ToString());
            currentRow++;
        }

        return pattern;
    }

    private List<string> FindColumnPattern(IXLWorksheet worksheet, IXLCell startCell, HashSet<string> processedCells)
    {
        var pattern = new List<string>();
        var row = startCell.Address.RowNumber;
        var currentColumn = startCell.Address.ColumnNumber;
        var baseFormula = startCell.FormulaA1;

        while (true)
        {
            var cell = worksheet.Cell(row, currentColumn);
            if (!cell.HasFormula || !IsColumnWiseFormula(baseFormula, cell.FormulaA1, currentColumn - startCell.Address.ColumnNumber))
                break;

            pattern.Add(cell.Address.ToString());
            processedCells.Add(cell.Address.ToString());
            currentColumn++;
        }

        return pattern;
    }

    private bool IsRowWiseFormula(string baseFormula, string currentFormula, int rowOffset)
    {
        if (rowOffset == 0) return true;
        
        // Replace row numbers in the base formula
        var expectedFormula = baseFormula;
        for (int i = 0; i <= 9; i++)
        {
            expectedFormula = expectedFormula.Replace($"{i}", $"{i + rowOffset}");
        }

        return expectedFormula == currentFormula;
    }

    private bool IsColumnWiseFormula(string baseFormula, string currentFormula, int columnOffset)
    {
        if (columnOffset == 0) return true;

        // Convert column numbers to letters and replace
        var expectedFormula = baseFormula;
        for (char c = 'A'; c <= 'Z'; c++)
        {
            var newColumn = (char)(c + columnOffset);
            expectedFormula = expectedFormula.Replace(c.ToString(), newColumn.ToString());
        }

        return expectedFormula == currentFormula;
    }
}

var analyzer = new ExcelFormulaAnalyzer();
var results = analyzer.AnalyzeExcelFile("path/to/your/excel/file.xlsx");

foreach (var pattern in results)
{
    Console.WriteLine($"Start Cell: {pattern.StartCell}");
    Console.WriteLine($"Formula: {pattern.Formula}");
    Console.WriteLine($"Direction: {pattern.DragDirection}");
    Console.WriteLine($"Affected Cells: {string.Join(", ", pattern.AffectedCells)}");
    Console.WriteLine();
}
