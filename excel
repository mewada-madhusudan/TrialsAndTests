using ClosedXML.Excel;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Text.RegularExpressions;

public class WorksheetFormulaResult
{
    public string WorksheetName { get; set; }
    public List<FormulaPattern> Patterns { get; set; }
}

public class FormulaPattern
{
    public string StartCell { get; set; }
    public string Formula { get; set; }
    public string DragDirection { get; set; }
    public List<string> AffectedCells { get; set; }

    public FormulaPattern()
    {
        AffectedCells = new List<string>();
    }
}

public class ExcelFormulaAnalyzer
{
    private static readonly Regex RowRegex = new Regex(@"([A-Z]+)(\d+)", RegexOptions.Compiled);
    private static readonly ParallelOptions ParallelOptions = new ParallelOptions { MaxDegreeOfParallelism = Environment.ProcessorCount };

    public List<WorksheetFormulaResult> AnalyzeWorkbook(string filePath)
    {
        var results = new ConcurrentBag<WorksheetFormulaResult>();

        using (var workbook = new XLWorkbook(filePath, new LoadOptions { RecalculateAllFormulas = false }))
        {
            Parallel.ForEach(workbook.Worksheets, ParallelOptions, worksheet =>
            {
                var patterns = AnalyzeWorksheet(worksheet);
                results.Add(new WorksheetFormulaResult
                {
                    WorksheetName = worksheet.Name,
                    Patterns = patterns
                });
            });
        }

        return results.ToList();
    }

    private List<FormulaPattern> AnalyzeWorksheet(IXLWorksheet worksheet)
    {
        var patterns = new List<FormulaPattern>();
        var processedCells = new HashSet<string>();
        var usedRange = worksheet.RangeUsed();

        if (usedRange == null) return patterns;

        var formulaCells = GetFormulaCells(worksheet, usedRange);
        var cellGroups = GroupSimilarFormulas(formulaCells);

        foreach (var group in cellGroups)
        {
            if (group.Count() == 0) continue;

            var firstCell = group.First();
            if (processedCells.Contains(firstCell.Address.ToString())) continue;

            var pattern = DetectPattern(worksheet, group.ToList(), processedCells);
            if (pattern != null)
            {
                patterns.Add(pattern);
            }
        }

        return patterns;
    }

    private IEnumerable<IXLCell> GetFormulaCells(IXLWorksheet worksheet, IXLRange usedRange)
    {
        var cells = new ConcurrentBag<IXLCell>();
        
        Parallel.For(usedRange.RangeAddress.FirstAddress.RowNumber, 
                    usedRange.RangeAddress.LastAddress.RowNumber + 1, 
                    row =>
        {
            for (int col = usedRange.RangeAddress.FirstAddress.ColumnNumber; 
                     col <= usedRange.RangeAddress.LastAddress.ColumnNumber; 
                     col++)
            {
                var cell = worksheet.Cell(row, col);
                if (cell.HasFormula)
                {
                    cells.Add(cell);
                }
            }
        });

        return cells;
    }

    private IEnumerable<IGrouping<string, IXLCell>> GroupSimilarFormulas(IEnumerable<IXLCell> cells)
    {
        return cells.GroupBy(cell => NormalizeFormula(cell.FormulaA1));
    }

    private string NormalizeFormula(string formula)
    {
        return RowRegex.Replace(formula, match => 
            $"{match.Groups[1].Value}0");
    }

    private FormulaPattern DetectPattern(IXLWorksheet worksheet, List<IXLCell> cells, HashSet<string> processedCells)
    {
        if (cells.Count == 0) return null;

        var firstCell = cells[0];
        var pattern = new FormulaPattern
        {
            StartCell = firstCell.Address.ToString(),
            Formula = firstCell.FormulaA1
        };

        // Sort cells by row and column
        cells.Sort((a, b) =>
        {
            int rowCompare = a.Address.RowNumber.CompareTo(b.Address.RowNumber);
            return rowCompare != 0 ? rowCompare : a.Address.ColumnNumber.CompareTo(b.Address.ColumnNumber);
        });

        // Check for row pattern
        if (IsRowPattern(cells))
        {
            pattern.DragDirection = "Row-wise";
            pattern.AffectedCells = cells.Select(c => c.Address.ToString()).ToList();
            foreach (var cell in cells)
            {
                processedCells.Add(cell.Address.ToString());
            }
            return pattern;
        }

        // Check for column pattern
        if (IsColumnPattern(cells))
        {
            pattern.DragDirection = "Column-wise";
            pattern.AffectedCells = cells.Select(c => c.Address.ToString()).ToList();
            foreach (var cell in cells)
            {
                processedCells.Add(cell.Address.ToString());
            }
            return pattern;
        }

        // Single cell formula
        pattern.DragDirection = "Single";
        pattern.AffectedCells = new List<string> { firstCell.Address.ToString() };
        processedCells.Add(firstCell.Address.ToString());
        return pattern;
    }

    private bool IsRowPattern(List<IXLCell> cells)
    {
        if (cells.Count <= 1) return false;

        var firstCell = cells[0];
        var expectedRow = firstCell.Address.RowNumber;
        var expectedCol = firstCell.Address.ColumnNumber;

        for (int i = 1; i < cells.Count; i++)
        {
            expectedRow++;
            if (cells[i].Address.RowNumber != expectedRow || 
                cells[i].Address.ColumnNumber != expectedCol)
            {
                return false;
            }
        }
        return true;
    }

    private bool IsColumnPattern(List<IXLCell> cells)
    {
        if (cells.Count <= 1) return false;

        var firstCell = cells[0];
        var expectedRow = firstCell.Address.RowNumber;
        var expectedCol = firstCell.Address.ColumnNumber;

        for (int i = 1; i < cells.Count; i++)
        {
            expectedCol++;
            if (cells[i].Address.ColumnNumber != expectedCol || 
                cells[i].Address.RowNumber != expectedRow)
            {
                return false;
            }
        }
        return true;
    }
}
var analyzer = new ExcelFormulaAnalyzer();
var results = analyzer.AnalyzeWorkbook("path/to/your/excel/file.xlsx");

foreach (var worksheetResult in results)
{
    Console.WriteLine($"\nWorksheet: {worksheetResult.WorksheetName}");
    foreach (var pattern in worksheetResult.Patterns)
    {
        Console.WriteLine($"\nStart Cell: {pattern.StartCell}");
        Console.WriteLine($"Formula: {pattern.Formula}");
        Console.WriteLine($"Direction: {pattern.DragDirection}");
        Console.WriteLine($"Affected Cells: {string.Join(", ", pattern.AffectedCells)}");
    }
}
