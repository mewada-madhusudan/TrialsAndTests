import pandas as pd
from PyQt6.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QPushButton, 
                            QLabel, QLineEdit, QTableWidget, QTableWidgetItem,
                            QMessageBox, QHeaderView, QWidget, QStackedWidget,
                            QFrame, QScrollArea, QListWidget)
from PyQt6.QtCore import Qt

class AccessControlDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Access Control Management")
        self.setMinimumSize(1000, 600)
        
        # Initialize sample DataFrame
        self.df = pd.DataFrame({
            'application_name': ['App1', 'App2', 'App3'],
            'exe_path': ['/path1', '/path2', '/path3'],
            'lob': ['LOB1', 'LOB2', 'LOB1'],
            'sids': ['SID1,SID2', 'SID3', 'SID4,SID5,SID6']
        })
        
        self.setup_ui()
        
    def setup_ui(self):
        # Main layout
        main_layout = QHBoxLayout(self)
        
        # Left panel (1/3 width) setup
        left_panel = self.setup_left_panel()
        main_layout.addWidget(left_panel, 1)
        
        # Right panel (2/3 width) setup
        self.right_stack = QStackedWidget()
        self.setup_right_panel()
        main_layout.addWidget(self.right_stack, 2)
        
        # Style
        self.setStyleSheet("""
            QPushButton {
                background-color: #4a90e2;
                color: white;
                border: none;
                padding: 8px 15px;
                border-radius: 4px;
                min-height: 30px;
            }
            QPushButton:hover {
                background-color: #357abd;
            }
            QFrame {
                background-color: white;
                border: 1px solid #e0e0e0;
                border-radius: 4px;
            }
            QLabel {
                font-size: 14px;
            }
            QLineEdit {
                padding: 5px;
                border: 1px solid #e0e0e0;
                border-radius: 4px;
            }
        """)

    def setup_left_panel(self):
        left_frame = QFrame()
        layout = QVBoxLayout(left_frame)
        
        # Title
        title = QLabel("Access Control")
        title.setStyleSheet("font-size: 18px; font-weight: bold; margin-bottom: 20px;")
        layout.addWidget(title)
        
        # Option buttons
        self.add_app_btn = QPushButton("Add New Application")
        self.manage_access_btn = QPushButton("Manage User Access")
        
        self.add_app_btn.clicked.connect(lambda: self.right_stack.setCurrentIndex(0))
        self.manage_access_btn.clicked.connect(lambda: self.right_stack.setCurrentIndex(1))
        
        layout.addWidget(self.add_app_btn)
        layout.addWidget(self.manage_access_btn)
        layout.addStretch()
        
        return left_frame

    def setup_right_panel(self):
        # Add Application Form
        self.setup_add_application_panel()
        
        # Manage Access Panel
        self.setup_manage_access_panel()

    def setup_add_application_panel(self):
        add_app_widget = QFrame()
        layout = QVBoxLayout(add_app_widget)
        
        # Title
        title = QLabel("Add New Application")
        title.setStyleSheet("font-size: 18px; font-weight: bold; margin-bottom: 20px;")
        layout.addWidget(title)
        
        # Form fields
        fields = [
            ("Application Name:", "application_name"),
            ("Application Exe path:", "exe_path"),
            ("LOB:", "lob"),
            ("SIDs:", "sids")
        ]
        
        self.add_app_fields = {}
        for label_text, field_name in fields:
            field_layout = QHBoxLayout()
            label = QLabel(label_text)
            label.setMinimumWidth(150)
            line_edit = QLineEdit()
            self.add_app_fields[field_name] = line_edit
            field_layout.addWidget(label)
            field_layout.addWidget(line_edit)
            layout.addLayout(field_layout)
        
        # Save button
        save_btn = QPushButton("Save Application")
        save_btn.clicked.connect(self.save_application)
        layout.addWidget(save_btn)
        layout.addStretch()
        
        self.right_stack.addWidget(add_app_widget)

    def setup_manage_access_panel(self):
        manage_widget = QFrame()
        layout = QVBoxLayout(manage_widget)
        
        # Title
        title = QLabel("Manage User Access")
        title.setStyleSheet("font-size: 18px; font-weight: bold; margin-bottom: 20px;")
        layout.addWidget(title)
        
        # Application selection and user management
        content_layout = QHBoxLayout()
        
        # Application list (left side of right panel)
        app_list_layout = QVBoxLayout()
        app_list_label = QLabel("Applications:")
        self.app_list = QListWidget()
        self.app_list.addItems(self.df['application_name'].tolist())
        self.app_list.currentItemChanged.connect(self.show_application_users)
        app_list_layout.addWidget(app_list_label)
        app_list_layout.addWidget(self.app_list)
        content_layout.addLayout(app_list_layout)
        
        # User management (right side of right panel)
        user_layout = QVBoxLayout()
        
        # Add new user section
        add_user_layout = QHBoxLayout()
        self.new_user_input = QLineEdit()
        self.new_user_input.setPlaceholderText("Enter new user SID")
        add_user_btn = QPushButton("Add User")
        add_user_btn.clicked.connect(self.add_new_user)
        add_user_layout.addWidget(self.new_user_input)
        add_user_layout.addWidget(add_user_btn)
        user_layout.addLayout(add_user_layout)
        
        # Users list
        self.users_widget = QScrollArea()
        self.users_widget.setWidgetResizable(True)
        self.users_container = QWidget()
        self.users_layout = QVBoxLayout(self.users_container)
        self.users_widget.setWidget(self.users_container)
        user_layout.addWidget(self.users_widget)
        
        content_layout.addLayout(user_layout)
        layout.addLayout(content_layout)
        
        self.right_stack.addWidget(manage_widget)

    def save_application(self):
        new_app = {field: widget.text() for field, widget in self.add_app_fields.items()}
        
        if not all(new_app.values()):
            QMessageBox.warning(self, "Warning", "Please fill in all fields!")
            return
            
        self.df = pd.concat([self.df, pd.DataFrame([new_app])], ignore_index=True)
        
        # Clear fields
        for widget in self.add_app_fields.values():
            widget.clear()
            
        # Update application list
        self.app_list.clear()
        self.app_list.addItems(self.df['application_name'].tolist())
        
        QMessageBox.information(self, "Success", "Application added successfully!")

    def show_application_users(self, current_item):
        if not current_item:
            return
            
        # Clear previous users
        for i in reversed(range(self.users_layout.count())):
            widget = self.users_layout.itemAt(i).widget()
            if widget:
                widget.setParent(None)
            
        # Get users for selected application
        app_name = current_item.text()
        app_data = self.df[self.df['application_name'] == app_name].iloc[0]
        users = app_data['sids'].split(',')
        
        # Add user entries
        for user in users:
            if user.strip():
                user_frame = QFrame()
                user_layout = QHBoxLayout(user_frame)
                
                user_label = QLabel(user.strip())
                remove_btn = QPushButton("Remove")
                remove_btn.clicked.connect(lambda checked, u=user, a=app_name: 
                                        self.remove_user(u, a))
                
                user_layout.addWidget(user_label)
                user_layout.addWidget(remove_btn)
                
                self.users_layout.addWidget(user_frame)
        
        self.users_layout.addStretch()

    def add_new_user(self):
        if not self.app_list.currentItem():
            QMessageBox.warning(self, "Warning", "Please select an application first!")
            return
            
        new_sid = self.new_user_input.text().strip()
        if not new_sid:
            return
            
        app_name = self.app_list.currentItem().text()
        app_idx = self.df[self.df['application_name'] == app_name].index[0]
        
        current_sids = self.df.at[app_idx, 'sids'].split(',')
        if new_sid not in current_sids:
            current_sids.append(new_sid)
            self.df.at[app_idx, 'sids'] = ','.join(current_sids)
            
        self.new_user_input.clear()
        self.show_application_users(self.app_list.currentItem())

    def remove_user(self, user, app_name):
        app_idx = self.df[self.df['application_name'] == app_name].index[0]
        current_sids = self.df.at[app_idx, 'sids'].split(',')
        current_sids.remove(user)
        self.df.at[app_idx, 'sids'] = ','.join(current_sids)
        
        self.show_application_users(self.app_list.currentItem())

if __name__ == '__main__':
    import sys
    from PyQt6.QtWidgets import QApplication
    app = QApplication(sys.argv)
    dialog = AccessControlDialog()
    dialog.show()
    sys.exit(app.exec())
