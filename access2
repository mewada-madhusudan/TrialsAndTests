import pandas as pd
from PyQt6.QtGui import QColor
from PyQt6.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QPushButton,
                             QLabel, QLineEdit, QTableWidget, QTableWidgetItem,
                             QMessageBox, QHeaderView, QWidget, QStackedWidget,
                             QFrame, QScrollArea, QListWidget, QListWidgetItem)
from PyQt6.QtCore import Qt, QPropertyAnimation, QSize


class AppTileWidget(QFrame):
    def __init__(self, name, description, parent=None):
        super().__init__(parent)
        self.setObjectName("appTile")
        self.setFixedHeight(100)  # Fixed height for consistency
        self.setup_ui(name, description)

    def setup_ui(self, name, description):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(16, 12, 16, 12)
        layout.setSpacing(4)

        # App icon/emoji (placeholder)
        icon_label = QLabel("ðŸ”¹")
        icon_label.setProperty("appIcon", True)

        # App name with icon in horizontal layout
        name_layout = QHBoxLayout()
        name_layout.setSpacing(8)
        name_layout.addWidget(icon_label)

        name_label = QLabel(name)
        name_label.setProperty("appName", True)
        name_label.setWordWrap(True)
        name_layout.addWidget(name_label)
        name_layout.addStretch()

        # Description
        desc_label = QLabel(description)
        desc_label.setProperty("appDescription", True)
        desc_label.setWordWrap(True)

        layout.addLayout(name_layout)
        layout.addWidget(desc_label)
        layout.addStretch()


class AccessControlDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Access Control")
        self.setMinimumSize(900, 600)

        self.df = pd.DataFrame({
            'application_name': ['App1', 'App2', 'App3'],
            'description': ['First application description', 'Second application description',
                            'Third application description'],
            'exe_path': ['/path1', '/path2', '/path3'],
            'lob': ['LOB1', 'LOB2', 'LOB1'],
            'sids': ['SID1,SID2', 'SID3', 'SID4,SID5,SID6']
        })

        self.setup_ui()

    def setup_ui(self):
        main_layout = QHBoxLayout(self)
        main_layout.setSpacing(0)
        main_layout.setContentsMargins(0, 0, 0, 0)

        # Left panel
        left_panel = self.setup_left_panel()
        main_layout.addWidget(left_panel)

        # Right panel
        self.right_stack = QStackedWidget()
        self.setup_right_panel()
        main_layout.addWidget(self.right_stack)

        self.apply_styles()

    def apply_styles(self):
        self.setStyleSheet("""
            QDialog {
                background-color: #ffffff;
            }
            QPushButton {
                border: none;
                padding: 8px 16px;
                color: #666;
                text-align: left;
                font-size: 13px;
                border-radius: 4px;
                margin: 2px 8px;
            }
            QPushButton:hover {
                background-color: #f5f5f5;
                color: #1976d2;
            }
            QPushButton:checked {
                background-color: #e3f2fd;
                color: #1976d2;
                font-weight: bold;
            }
            QPushButton#actionButton {
                background-color: #1976d2;
                color: white;
                padding: 6px 16px;
                text-align: center;
                font-weight: 500;
            }
            QPushButton#actionButton:hover {
                background-color: #1565c0;
                color: white;
            }
            QPushButton#removeBtn {
                color: #f44336;
                padding: 4px 8px;
                margin: 0px;
                font-size: 12px;
                background: #ffebee;
                border-radius: 4px;
                text-align: center;
                min-width: 60px;
            }
            QPushButton#removeBtn:hover {
                background-color: #ef5350;
                color: white;
            }
            QFrame#appTile {
                background-color: #f8f9fa;
                border: 1px solid #e0e0e0;
                border-radius: 6px;
            }
            QFrame#appTile:hover {
                background-color: #f5f5f5;
                border: 1px solid #bbdefb;
            }
            QLineEdit {
                border: 2px solid #e0e0e0;
                padding: 8px;
                border-radius: 4px;
                font-size: 13px;
            }
            QLineEdit:focus {
                border: 2px solid #1976d2;
                background-color: #ffffff;
            }
            QLineEdit:hover {
                border: 2px solid #bbdefb;
            }
            QListWidget {
                border: 1px solid #e0e0e0;
                border-radius: 4px;
                background-color: white;
                padding: 8px;
            }
            QListWidget::item {
                padding: 4px;
                border-radius: 6px;
            }
            QListWidget::item:selected {
                background-color: #e3f2fd;
            }
            QListWidget::item:hover {
                background-color: transparent;
            }
            QFrame#leftPanel {
                background-color: #fafafa;
                border-right: 1px solid #e0e0e0;
            }
            QFrame#sidTag {
                background-color: #f5f5f5;
                border: 1px solid #e0e0e0;
                border-radius: 4px;
                padding: 8px;
                margin: 4px;
            }
            QFrame#sidTag:hover {
                border-color: #bbdefb;
                background-color: #f8f9fa;
            }
            QLabel {
                color: #333;
                font-size: 13px;
            }
            QLabel[heading="true"] {
                font-size: 18px;
                font-weight: bold;
                color: #1976d2;
                padding: 16px;
            }
            QLabel[subheading="true"] {
                font-size: 14px;
                font-weight: 500;
                color: #666;
                padding-bottom: 8px;
            }
            QLabel[appName="true"] {
                font-size: 15px;
                font-weight: bold;
                color: #1976d2;
                margin-bottom: 4px;
            }
            QLabel[appDescription="true"] {
                font-size: 12px;
                color: #666;
                line-height: 1.4;
            }
            QFrame#appTile {
                background-color: white;
                border: 1px solid #e0e0e0;
                border-radius: 8px;
                margin: 4px 8px;
            }
            QFrame#appTile:hover {
                background-color: #f8f9fa;
                border: 1px solid #1976d2;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }
            QLabel[appName="true"] {
                font-size: 14px;
                font-weight: bold;
                color: #1976d2;
                margin-bottom: 4px;
            }
            QLabel[appDescription="true"] {
                font-size: 12px;
                color: #666;
                line-height: 1.4;
                margin-top: 4px;
            }
            QLabel[appIcon="true"] {
                font-size: 16px;
                color: #1976d2;
            }
            QListWidget {
                background-color: #f5f5f5;
                border: none;
                border-radius: 0px;
                padding: 8px 4px;
            }
            QListWidget::item {
                padding: 0px;
                margin: 4px 0px;
                border: none;
            }
            QListWidget::item:selected {
                background-color: transparent;
            }
            QListWidget::item:hover {
                background-color: transparent;
            }
        """)

    def setup_left_panel(self):
        left_panel = QFrame()
        left_panel.setObjectName("leftPanel")
        left_panel.setFixedWidth(220)
        layout = QVBoxLayout(left_panel)
        layout.setSpacing(4)
        layout.setContentsMargins(0, 0, 0, 0)

        title = QLabel("Access Control")
        title.setProperty("heading", True)
        layout.addWidget(title)

        # Navigation with icons (you can replace with actual icons)
        self.add_app_btn = QPushButton("âž• Add Application")
        self.manage_access_btn = QPushButton("ðŸ‘¥ Manage Access")

        self.add_app_btn.setCheckable(True)
        self.manage_access_btn.setCheckable(True)

        layout.addWidget(self.add_app_btn)
        layout.addWidget(self.manage_access_btn)
        layout.addStretch()

        self.add_app_btn.clicked.connect(lambda: self.switch_panel(0))
        self.manage_access_btn.clicked.connect(lambda: self.switch_panel(1))

        return left_panel

    def setup_right_panel(self):
        # Add Application Panel
        add_app_widget = QWidget()
        add_layout = QVBoxLayout(add_app_widget)
        add_layout.setContentsMargins(30, 20, 30, 20)
        add_layout.setSpacing(20)

        title = QLabel("Add New Application")
        title.setProperty("heading", True)
        add_layout.addWidget(title)

        description = QLabel("Enter the application details below to register it in the system.")
        description.setProperty("subheading", True)
        add_layout.addWidget(description)

        fields = [
            ("Application Name", "application_name", "Enter the name of the application"),
            ("Application Description", "description", "Enter a brief description of the application"),
            ("Executable Path", "exe_path", "Enter the full path to the executable"),
            ("Line of Business", "lob", "Enter the business unit or department"),
            ("Security IDs", "sids", "Enter comma-separated security IDs")
        ]

        self.add_app_fields = {}
        for label_text, field_name, placeholder in fields:
            field_layout = QVBoxLayout()
            field_layout.setSpacing(6)

            label = QLabel(label_text)
            line_edit = QLineEdit()
            line_edit.setPlaceholderText(placeholder)

            self.add_app_fields[field_name] = line_edit
            field_layout.addWidget(label)
            field_layout.addWidget(line_edit)

            add_layout.addLayout(field_layout)

        button_layout = QHBoxLayout()
        save_btn = QPushButton("Save Application")
        save_btn.setObjectName("actionButton")
        save_btn.setFixedWidth(140)
        button_layout.addStretch()
        button_layout.addWidget(save_btn)

        save_btn.clicked.connect(self.save_application)
        add_layout.addLayout(button_layout)
        add_layout.addStretch()

        # Manage Access Panel
        manage_widget = QWidget()
        manage_layout = QHBoxLayout(manage_widget)
        manage_layout.setContentsMargins(0, 0, 0, 0)
        manage_layout.setSpacing(0)

        # Apps list with tiles
        apps_container = QWidget()
        apps_layout = QVBoxLayout(apps_container)
        apps_layout.setContentsMargins(20, 20, 20, 20)

        apps_title = QLabel("Applications")
        apps_title.setProperty("heading", True)

        self.app_list = QListWidget()
        self.app_list.setSpacing(8)
        self.app_list.setResizeMode(QListWidget.ResizeMode.Adjust)
        self.app_list.setViewMode(QListWidget.ViewMode.ListMode)  # Changed to ListMode
        self.app_list.setMinimumWidth(300)
        self.app_list.setUniformItemSizes(False)
        self.update_app_list()
        self.app_list.currentItemChanged.connect(self.show_application_users)

        apps_layout.addWidget(apps_title)
        apps_layout.addWidget(self.app_list)

        # Users section [remains the same]
        users_container = QWidget()
        users_container.setStyleSheet("background-color: white;")
        users_layout = QVBoxLayout(users_container)
        users_layout.setContentsMargins(20, 20, 20, 20)

        users_title = QLabel("Manage Users")
        users_title.setProperty("heading", True)
        users_layout.addWidget(users_title)

        add_user_layout = QHBoxLayout()
        self.new_user_input = QLineEdit()
        self.new_user_input.setPlaceholderText("Enter user SID to add")
        add_user_btn = QPushButton("Add User")
        add_user_btn.setObjectName("actionButton")
        add_user_btn.setFixedWidth(100)

        add_user_layout.addWidget(self.new_user_input)
        add_user_layout.addWidget(add_user_btn)
        users_layout.addLayout(add_user_layout)

        users_list_label = QLabel("Current Users")
        users_list_label.setProperty("subheading", True)
        users_layout.addWidget(users_list_label)

        self.users_widget = QScrollArea()
        self.users_widget.setWidgetResizable(True)
        self.users_container = QWidget()
        self.users_layout = QVBoxLayout(self.users_container)
        self.users_layout.setAlignment(Qt.AlignmentFlag.AlignTop)
        self.users_widget.setWidget(self.users_container)

        users_layout.addWidget(self.users_widget)
        add_user_btn.clicked.connect(self.add_new_user)

        manage_layout.addWidget(apps_container, 1)
        manage_layout.addWidget(users_container, 2)

        self.right_stack.addWidget(add_app_widget)
        self.right_stack.addWidget(manage_widget)

    def update_app_list(self):
        self.app_list.clear()
        for _, row in self.df.iterrows():
            item = QListWidgetItem(self.app_list)
            tile_widget = AppTileWidget(row['application_name'], row['description'])
            item.setSizeHint(tile_widget.sizeHint())
            self.app_list.setItemWidget(item, tile_widget)
            item.setData(Qt.ItemDataRole.UserRole, row['application_name'])

    def create_sid_tag(self, sid):
        tag = QFrame()
        tag.setObjectName("sidTag")
        layout = QHBoxLayout(tag)
        layout.setContentsMargins(8, 4, 8, 4)
        layout.setSpacing(8)

        label = QLabel(sid)
        remove_btn = QPushButton("Remove")
        remove_btn.setObjectName("removeBtn")
        remove_btn.setFixedWidth(70)

        layout.addWidget(label)
        layout.addWidget(remove_btn)
        layout.addStretch()

        return tag, remove_btn

    def show_success_message(self, message):
        msg = QMessageBox(self)
        msg.setIcon(QMessageBox.Icon.Information)
        msg.setText(message)
        msg.setWindowTitle("Success")
        msg.setStyleSheet("""
            QMessageBox {
                background-color: white;
            }
            QMessageBox QPushButton {
                background-color: #1976d2;
                color: white;
                padding: 6px 16px;
                border-radius: 4px;
                min-width: 80px;
            }
            QMessageBox QPushButton:hover {
                background-color: #1565c0;
            }
        """)
        msg.exec()

    def create_app_tile_widget(self, name, description):
        return AppTileWidget(name, description)

    def show_application_users(self, current_item):
        if not current_item:
            return

        # Clear previous users
        for i in reversed(range(self.users_layout.count())):
            widget = self.users_layout.itemAt(i).widget()
            if widget:
                widget.setParent(None)

        # Get users for selected application
        app_name = current_item.data(Qt.ItemDataRole.UserRole)
        app_data = self.df[self.df['application_name'] == app_name].iloc[0]
        users = app_data['sids'].split(',')

        # Add user tags
        for user in users:
            if user.strip():
                tag, remove_btn = self.create_sid_tag(user.strip())
                remove_btn.clicked.connect(
                    lambda checked, u=user, a=app_name: self.remove_user(u, a))
                self.users_layout.addWidget(tag)

    def switch_panel(self, index):
        self.add_app_btn.setChecked(index == 0)
        self.manage_access_btn.setChecked(index == 1)
        self.right_stack.setCurrentIndex(index)

    def setup_add_application_panel(self):
        add_app_widget = QFrame()
        layout = QVBoxLayout(add_app_widget)
        layout.setSpacing(20)

        # Title
        title = QLabel("Add New Application")
        title.setProperty("heading", True)
        layout.addWidget(title)

        # Form fields with better layout and hints
        fields = [
            ("Application Name:", "application_name", "Enter the display name of the application"),
            ("Application Exe path:", "exe_path", "Full path to the executable file"),
            ("LOB:", "lob", "Line of Business identifier"),
            ("SIDs:", "sids", "Comma-separated list of Security IDs")
        ]

        self.add_app_fields = {}
        for label_text, field_name, placeholder in fields:
            field_frame = QFrame()
            field_layout = QVBoxLayout(field_frame)
            field_layout.setSpacing(5)

            label = QLabel(label_text)
            line_edit = QLineEdit()
            line_edit.setPlaceholderText(placeholder)

            self.add_app_fields[field_name] = line_edit
            field_layout.addWidget(label)
            field_layout.addWidget(line_edit)

            layout.addWidget(field_frame)

        # Save button with margin
        save_btn = QPushButton("Save Application")
        save_btn.setMinimumWidth(200)
        save_container = QHBoxLayout()
        save_container.addStretch()
        save_container.addWidget(save_btn)
        save_container.addStretch()

        save_btn.clicked.connect(self.save_application)
        layout.addLayout(save_container)
        layout.addStretch()

        self.right_stack.addWidget(add_app_widget)

    def save_application(self):
        new_app = {field: widget.text() for field, widget in self.add_app_fields.items()}

        if not all(new_app.values()):
            QMessageBox.warning(self, "Required Fields",
                                "Please fill in all fields before saving.",
                                QMessageBox.StandardButton.Ok)
            return

        self.df = pd.concat([self.df, pd.DataFrame([new_app])], ignore_index=True)

        # Clear fields and update UI
        for widget in self.add_app_fields.values():
            widget.clear()

        self.update_app_list()

        self.show_success_message("Application has been added successfully!")

    def add_new_user(self):
        if not self.app_list.currentItem():
            QMessageBox.warning(self, "No Application Selected",
                                "Please select an application before adding a user.",
                                QMessageBox.StandardButton.Ok)
            return

        new_sid = self.new_user_input.text().strip()
        if not new_sid:
            return

        app_name = self.app_list.currentItem().text()
        app_idx = self.df[self.df['application_name'] == app_name].index[0]

        current_sids = self.df.at[app_idx, 'sids'].split(',')
        if new_sid not in current_sids:
            current_sids.append(new_sid)
            self.df.at[app_idx, 'sids'] = ','.join(current_sids)

        self.new_user_input.clear()
        self.show_application_users(self.app_list.currentItem())

    def remove_user(self, user, app_name):
        reply = QMessageBox.question(self, "Confirm Removal",
                                     f"Are you sure you want to remove user {user}?",
                                     QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)

        if reply == QMessageBox.StandardButton.Yes:
            app_idx = self.df[self.df['application_name'] == app_name].index[0]
            current_sids = self.df.at[app_idx, 'sids'].split(',')
            current_sids.remove(user)
            self.df.at[app_idx, 'sids'] = ','.join(current_sids)
            self.show_application_users(self.app_list.currentItem())


if __name__ == '__main__':
    import sys
    from PyQt6.QtWidgets import QApplication

    app = QApplication(sys.argv)
    dialog = AccessControlDialog()
    dialog.show()
    sys.exit(app.exec())
