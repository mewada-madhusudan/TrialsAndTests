# Update the create_sid_tag method to right-align the remove button
def create_sid_tag(self, sid):
    tag = QFrame()
    tag.setObjectName("sidTag")
    layout = QHBoxLayout(tag)
    layout.setContentsMargins(8, 4, 8, 4)
    layout.setSpacing(8)

    label = QLabel(sid)
    remove_btn = QPushButton("Remove")
    remove_btn.setObjectName("removeBtn")
    remove_btn.setFixedWidth(70)

    layout.addWidget(label)
    layout.addStretch()  # Add stretch before the button to push it right
    layout.addWidget(remove_btn)

    return tag, remove_btn

# Update the setup_right_panel method to fix Add User button visibility
def setup_right_panel(self):
    # ... (previous code remains the same until users section) ...

    # Users section with improved button visibility
    users_container = QWidget()
    users_container.setStyleSheet("background-color: white;")
    users_layout = QVBoxLayout(users_container)
    users_layout.setContentsMargins(20, 20, 20, 20)
    users_layout.setSpacing(16)

    users_title = QLabel("Manage Users")
    users_title.setProperty("heading", True)
    users_layout.addWidget(users_title)

    # Add user section with improved button visibility
    add_user_layout = QHBoxLayout()
    add_user_layout.setSpacing(8)
    
    self.new_user_input = QLineEdit()
    self.new_user_input.setPlaceholderText("Enter user SID to add")
    self.new_user_input.setMinimumHeight(36)
    
    add_user_btn = QPushButton("Add User")
    add_user_btn.setObjectName("actionButton")
    add_user_btn.setFixedHeight(36)
    add_user_btn.setFixedWidth(100)
    
    add_user_layout.addWidget(self.new_user_input)
    add_user_layout.addWidget(add_user_btn)
    users_layout.addLayout(add_user_layout)

    # Update the style sheet to ensure button visibility
    add_user_btn.setStyleSheet("""
        QPushButton {
            background-color: #1976d2;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            font-weight: 500;
        }
        QPushButton:hover {
            background-color: #1565c0;
        }
    """)

    users_list_label = QLabel("Current Users")
    users_list_label.setProperty("subheading", True)
    users_layout.addWidget(users_list_label)

    self.users_widget = QScrollArea()
    self.users_widget.setWidgetResizable(True)
    self.users_container = QWidget()
    self.users_layout = QVBoxLayout(self.users_container)
    self.users_layout.setAlignment(Qt.AlignmentFlag.AlignTop)
    self.users_layout.setSpacing(8)
    self.users_widget.setWidget(self.users_container)

    users_layout.addWidget(self.users_widget)
    add_user_btn.clicked.connect(self.add_new_user)

    manage_layout = QHBoxLayout(manage_widget)
    manage_layout.setContentsMargins(0, 0, 0, 0)
    manage_layout.setSpacing(0)
    manage_layout.addWidget(apps_container, 1)
    manage_layout.addWidget(users_container, 2)

# Update the style sheet in apply_styles
def apply_styles(self):
    self.setStyleSheet("""
        /* ... (keep existing styles) ... */
        
        QPushButton#actionButton {
            background-color: #1976d2;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            font-weight: 500;
            min-width: 100px;
            min-height: 36px;
        }
        QPushButton#actionButton:hover {
            background-color: #1565c0;
        }
        QPushButton#removeBtn {
            color: #f44336;
            padding: 4px 8px;
            margin: 0px;
            font-size: 12px;
            background: #ffebee;
            border-radius: 4px;
            text-align: center;
            min-width: 60px;
            border: 1px solid #ffcdd2;
        }
        QPushButton#removeBtn:hover {
            background-color: #ef5350;
            color: white;
            border: 1px solid #ef5350;
        }
        QLineEdit {
            border: 1px solid #e0e0e0;
            padding: 8px;
            border-radius: 4px;
            font-size: 13px;
            min-height: 36px;
            background: white;
        }
        QLineEdit:focus {
            border: 1px solid #1976d2;
        }
        QFrame#sidTag {
            background-color: #f5f5f5;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            padding: 4px;
            margin: 4px 0px;
            min-height: 40px;
        }
        /* ... (keep other existing styles) ... */
    """)
###################
fields = [
    ("Line of Business", "lob", ["LOB1", "LOB2", "LOB3", "LOB4"], "dropdown"),
    ("Security Group", "security_group", ["Admin", "User", "Auditor", "Manager"], "dropdown"),
    # Keep other fields as line edits
    ("Application Name", "application_name", None, "text"),
    ("Application Description", "description", None, "text"),
    ("Executable Path", "exe_path", None, "text")
]

# In setup_right_panel method, modify the field creation logic:
for label_text, field_name, options, field_type in fields:
    field_layout = QVBoxLayout()
    field_layout.setSpacing(6)

    label = QLabel(label_text)
    
    if field_type == "dropdown":
        field = QComboBox()
        field.addItems(options)
    else:
        field = QLineEdit()
        field.setPlaceholderText(f"Enter {label_text.lower()}")
    
    self.add_app_fields[field_name] = field
    field_layout.addWidget(label)
    field_layout.addWidget(field)

    add_layout.addLayout(field_layout)
#######:8";9"2+2
def setup_right_panel(self):
    # Add Application/Update Panel
    add_update_widget = QWidget()
    main_layout = QVBoxLayout(add_update_widget)
    main_layout.setContentsMargins(0, 0, 0, 0)
    main_layout.setSpacing(0)

    # Create fixed header section
    header_widget = QWidget()
    header_layout = QVBoxLayout(header_widget)
    header_layout.setContentsMargins(30, 20, 30, 10)  # Reduced bottom margin
    header_layout.setSpacing(10)  # Reduced spacing

    # Title section
    title = QLabel("Application Details")
    title.setProperty("heading", True)
    header_layout.addWidget(title)

    description = QLabel("Enter the application details below.")
    description.setProperty("subheading", True)
    header_layout.addWidget(description)

    # Application selection for update mode
    select_layout = QHBoxLayout()
    select_layout.setSpacing(10)  # Reduced spacing
    self.update_mode_checkbox = QCheckBox("Update Existing Application")
    self.app_select_combo = QComboBox()
    self.app_select_combo.setMinimumWidth(200)
    self.app_select_combo.setEnabled(False)
    
    select_layout.addWidget(self.update_mode_checkbox)
    select_layout.addWidget(self.app_select_combo)
    select_layout.addStretch()
    header_layout.addLayout(select_layout)

    # Add header to main layout
    main_layout.addWidget(header_widget)

    # Create a scroll area for the form
    scroll_area = QScrollArea()
    scroll_area.setWidgetResizable(True)
    scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
    
    # Create container widget for the form
    form_container = QWidget()
    add_layout = QVBoxLayout(form_container)
    add_layout.setContentsMargins(30, 10, 30, 20)  # Reduced top margin
    add_layout.setSpacing(15)  # Reduced spacing

    # Form fields
    fields = [
        ("application_name", "Application Name", "Enter the name of the application"),
        ("description", "Application Description", "Enter a brief description"),
        ("exe_path", "Executable Path", "Enter the full path to the executable"),
        ("lob", "Line of Business", "Enter the business unit or department"),
        ("version", "Version", "Enter application version"),
        ("owner", "Owner", "Enter application owner"),
        ("support_contact", "Support Contact", "Enter support contact information"),
        ("deployment_date", "Deployment Date", "Enter deployment date"),
        ("last_update", "Last Update Date", "Enter last update date"),
        ("status", "Status", "Enter application status"),
        ("environment", "Environment", "Enter deployment environment"),
        ("dependencies", "Dependencies", "Enter application dependencies"),
        ("backup_location", "Backup Location", "Enter backup location"),
        ("sids", "Security IDs", "Enter comma-separated security IDs")
    ]

    self.add_app_fields = {}
    for field_name, label_text, placeholder in fields:
        field_layout = QVBoxLayout()
        field_layout.setSpacing(4)  # Reduced spacing

        label = QLabel(label_text)
        label.setProperty("fieldLabel", True)
        
        line_edit = QLineEdit()
        line_edit.setPlaceholderText(placeholder)
        line_edit.setProperty("formInput", True)

        self.add_app_fields[field_name] = line_edit
        field_layout.addWidget(label)
        field_layout.addWidget(line_edit)

        add_layout.addLayout(field_layout)

    # Button section
    button_layout = QHBoxLayout()
    self.save_btn = QPushButton("Save Application")
    self.save_btn.setObjectName("actionButton")
    self.save_btn.setFixedWidth(140)
    
    self.clear_btn = QPushButton("Clear Form")
    self.clear_btn.setObjectName("secondaryButton")
    self.clear_btn.setFixedWidth(140)
    
    button_layout.addStretch()
    button_layout.addWidget(self.clear_btn)
    button_layout.addWidget(self.save_btn)

    add_layout.addLayout(button_layout)
    add_layout.addStretch()

    # Set the form container as the scroll area widget
    scroll_area.setWidget(form_container)
    main_layout.addWidget(scroll_area)

    # Connect signals
    self.update_mode_checkbox.toggled.connect(self.toggle_update_mode)
    self.app_select_combo.currentTextChanged.connect(self.load_application_data)
    self.save_btn.clicked.connect(self.save_application)
    self.clear_btn.clicked.connect(self.clear_form)

    self.right_stack.addWidget(add_update_widget)

##____
def apply_styles(self):
    # Add these styles to your existing stylesheet
    additional_styles = """
        QWidget#headerWidget {
            background-color: white;
            border-bottom: 1px solid #e0e0e0;
        }
        QScrollArea {
            border: none;
            background: white;
        }
        QComboBox {
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            padding: 6px;
            min-height: 32px;
            background: white;
        }
        QComboBox:disabled {
            background: #f5f5f5;
        }
        QCheckBox {
            spacing: 6px;
            min-height: 32px;
            padding: 2px;
        }
        QLabel[heading="true"] {
            padding: 0px 0px 8px 0px;
        }
        QLabel[subheading="true"] {
            padding: 0px 0px 4px 0px;
        }
    """
    current_style = self.styleSheet()
    self.setStyleSheet(current_style + additional_styles)
########______
def setup_right_panel(self):
    # Previous add application panel code remains the same...

    # Manage Access Panel
    manage_widget = QWidget()
    manage_layout = QHBoxLayout(manage_widget)
    manage_layout.setContentsMargins(0, 0, 0, 0)
    manage_layout.setSpacing(0)

    # Left side - Apps list
    apps_container = QWidget()
    apps_container.setObjectName("appsContainer")
    apps_layout = QVBoxLayout(apps_container)
    apps_layout.setContentsMargins(20, 20, 20, 20)

    apps_title = QLabel("Applications")
    apps_title.setProperty("heading", True)

    self.app_list = QListWidget()
    self.app_list.setSpacing(8)
    self.app_list.setResizeMode(QListWidget.ResizeMode.Adjust)
    self.app_list.setViewMode(QListWidget.ViewMode.ListMode)
    self.app_list.setMinimumWidth(300)
    self.app_list.setUniformItemSizes(False)
    self.update_app_list()
    self.app_list.currentItemChanged.connect(self.show_application_users)

    apps_layout.addWidget(apps_title)
    apps_layout.addWidget(self.app_list)

    # Right side - Users section with updated styling
    users_container = QWidget()
    users_container.setObjectName("usersContainer")
    users_layout = QVBoxLayout(users_container)
    users_layout.setContentsMargins(20, 20, 20, 20)

    users_title = QLabel("Manage Users")
    users_title.setProperty("heading", True)
    users_layout.addWidget(users_title)

    # Add user section
    add_user_layout = QHBoxLayout()
    self.new_user_input = QLineEdit()
    self.new_user_input.setPlaceholderText("Enter user SID to add")
    add_user_btn = QPushButton("Add User")
    add_user_btn.setObjectName("actionButton")
    add_user_btn.setFixedWidth(100)

    add_user_layout.addWidget(self.new_user_input)
    add_user_layout.addWidget(add_user_btn)
    users_layout.addLayout(add_user_layout)

    # Users list section
    users_list_label = QLabel("Current Users")
    users_list_label.setProperty("subheading", True)
    users_layout.addWidget(users_list_label)

    self.users_widget = QScrollArea()
    self.users_widget.setWidgetResizable(True)
    self.users_widget.setObjectName("usersScrollArea")
    
    self.users_container = QWidget()
    self.users_container.setObjectName("usersListContainer")
    self.users_layout = QVBoxLayout(self.users_container)
    self.users_layout.setAlignment(Qt.AlignmentFlag.AlignTop)
    self.users_layout.setSpacing(8)
    self.users_widget.setWidget(self.users_container)

    users_layout.addWidget(self.users_widget)
    add_user_btn.clicked.connect(self.add_new_user)

    manage_layout.addWidget(apps_container, 1)
    manage_layout.addWidget(users_container, 2)

    self.right_stack.addWidget(manage_widget)

def create_sid_tag(self, sid):
    tag = QFrame()
    tag.setObjectName("sidTag")
    layout = QHBoxLayout(tag)
    layout.setContentsMargins(8, 4, 8, 4)
    layout.setSpacing(8)

    # User icon and SID
    icon_label = QLabel("👤")  # User icon
    sid_label = QLabel(sid)
    sid_label.setStyleSheet("color: #2c3e50; font-weight: 500;")
    
    # Remove button
    remove_btn = QPushButton("Remove")
    remove_btn.setObjectName("removeBtn")
    remove_btn.setFixedWidth(70)

    layout.addWidget(icon_label)
    layout.addWidget(sid_label)
    layout.addStretch()
    layout.addWidget(remove_btn)

    return tag, remove_btn

def apply_styles(self):
    # Add these styles to your existing stylesheet
    additional_styles = """
        QWidget#appsContainer {
            background-color: #f8f9fa;
            border-right: 1px solid #e0e0e0;
        }
        
        QWidget#usersContainer {
            background-color: white;
        }
        
        QScrollArea#usersScrollArea {
            border: none;
            background-color: transparent;
        }
        
        QWidget#usersListContainer {
            background-color: transparent;
        }
        
        QFrame#sidTag {
            background-color: #e3f2fd;
            border: 1px solid #bbdefb;
            border-radius: 6px;
            padding: 4px;
            margin: 2px 0px;
        }
        
        QFrame#sidTag:hover {
            background-color: #bbdefb;
            border-color: #90caf9;
        }
        
        QPushButton#removeBtn {
            background-color: #ef5350;
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            min-width: 60px;
        }
        
        QPushButton#removeBtn:hover {
            background-color: #e53935;
        }
        
        QLineEdit {
            padding: 8px;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            background-color: white;
        }
        
        QLineEdit:focus {
            border-color: #2196f3;
        }
        
        QListWidget {
            background-color: transparent;
            border: none;
        }
        
        QListWidget::item {
            padding: 8px;
            margin: 2px 0px;
            border-radius: 4px;
        }
        
        QListWidget::item:selected {
            background-color: #e3f2fd;
        }
        
        QListWidget::item:hover {
            background-color: #f5f5f5;
        }
    """
    
    current_style = self.styleSheet()
    self.setStyleSheet(current_style + additional_styles)

def show_application_users(self, current_item):
    if not current_item:
        return

    # Clear previous users
    for i in reversed(range(self.users_layout.count())):
        widget = self.users_layout.itemAt(i).widget()
        if widget:
            widget.setParent(None)

    # Get users for selected application
    app_name = current_item.data(Qt.ItemDataRole.UserRole)
    app_data = self.df[self.df['application_name'] == app_name].iloc[0]
    users = app_data['sids'].split(',')

    # Add user tags with alternating colors
    for i, user in enumerate(users):
        if user.strip():
            tag, remove_btn = self.create_sid_tag(user.strip())
            # Set alternating background colors
            if i % 2 == 0:
                tag.setStyleSheet("""
                    QFrame#sidTag {
                        background-color: #e3f2fd;
                        border: 1px solid #bbdefb;
                    }
                    QFrame#sidTag:hover {
                        background-color: #bbdefb;
                        border-color: #90caf9;
                    }
                """)
            else:
                tag.setStyleSheet("""
                    QFrame#sidTag {
                        background-color: #f3f9ff;
                        border: 1px solid #bbdefb;
                    }
                    QFrame#sidTag:hover {
                        background-color: #bbdefb;
                        border-color: #90caf9;
                    }
                """)
            
            remove_btn.clicked.connect(
                lambda checked, u=user, a=app_name: self.remove_user(u, a))
            self.users_layout.addWidget(tag)
