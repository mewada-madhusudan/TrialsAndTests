// src/components/FileUploader.jsx
import { useState } from 'react';
import { Upload } from 'lucide-react';

const FileUploader = ({ onUpload, buttonText, acceptTypes = ".csv,.xlsx,.xls" }) => {
  const [dragging, setDragging] = useState(false);
  const [file, setFile] = useState(null);
  const [uploading, setUploading] = useState(false);
  const [error, setError] = useState('');

  const handleDragOver = (e) => {
    e.preventDefault();
    setDragging(true);
  };

  const handleDragLeave = () => {
    setDragging(false);
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setDragging(false);
    
    const droppedFile = e.dataTransfer.files[0];
    if (validateFile(droppedFile)) {
      setFile(droppedFile);
      setError('');
    }
  };

  const handleFileChange = (e) => {
    const selectedFile = e.target.files[0];
    if (validateFile(selectedFile)) {
      setFile(selectedFile);
      setError('');
    }
  };

  const validateFile = (file) => {
    if (!file) return false;
    
    const fileType = file.name.split('.').pop().toLowerCase();
    if (!['csv', 'xlsx', 'xls'].includes(fileType)) {
      setError('Please upload a CSV or Excel file');
      return false;
    }
    
    return true;
  };

  const handleUpload = async () => {
    if (!file) {
      setError('Please select a file');
      return;
    }

    setUploading(true);
    setError('');
    
    try {
      await onUpload(file);
      // Reset file after successful upload
      setFile(null);
    } catch (err) {
      setError(err.message || 'Error uploading file');
    } finally {
      setUploading(false);
    }
  };

  return (
    <div className="w-full">
      <div 
        className={`border-2 border-dashed rounded-lg p-6 text-center cursor-pointer ${
          dragging ? 'border-blue-500 bg-blue-50' : 'border-gray-300'
        }`}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
        onClick={() => document.getElementById('fileInput').click()}
      >
        <input
          id="fileInput"
          type="file"
          className="hidden"
          accept={acceptTypes}
          onChange={handleFileChange}
        />
        <Upload className="mx-auto h-12 w-12 text-gray-400" />
        <h3 className="mt-2 text-sm font-medium text-gray-900">
          {file ? file.name : 'Drag & drop or click to upload'}
        </h3>
        <p className="mt-1 text-xs text-gray-500">
          CSV or Excel files only
        </p>
        {file && (
          <div className="mt-4">
            <span className="text-sm text-gray-500">Selected: {file.name}</span>
          </div>
        )}
      </div>
      
      {error && <p className="mt-2 text-sm text-red-600">{error}</p>}
      
      <button
        onClick={handleUpload}
        disabled={!file || uploading}
        className={`mt-4 w-full px-4 py-2 rounded-md text-white ${
          !file || uploading ? 'bg-gray-400 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700'
        }`}
      >
        {uploading ? 'Uploading...' : buttonText || 'Upload File'}
      </button>
    </div>
  );
};

export default FileUploader;

// src/components/ConfigurationsList.jsx
import { useState, useEffect } from 'react';
import { getConfigurations } from '../api/reportApi';

const ConfigurationsList = ({ onSelectConfig }) => {
  const [configurations, setConfigurations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [selectedConfigId, setSelectedConfigId] = useState(null);

  useEffect(() => {
    const fetchConfigurations = async () => {
      try {
        const data = await getConfigurations();
        setConfigurations(data);
        setLoading(false);
      } catch (err) {
        setError('Failed to load configurations');
        setLoading(false);
      }
    };

    fetchConfigurations();
  }, []);

  const handleSelectConfig = (config) => {
    setSelectedConfigId(config.id);
    onSelectConfig(config);
  };

  if (loading) return <div className="text-center py-4">Loading configurations...</div>;
  if (error) return <div className="text-red-600 py-4">{error}</div>;
  if (configurations.length === 0) {
    return (
      <div className="text-center py-6 bg-gray-50 rounded-lg">
        <p className="text-gray-500">No configurations available. Upload a report to create your first configuration.</p>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow overflow-hidden">
      <h2 className="text-lg font-medium p-4 border-b">Available Configurations</h2>
      <ul className="divide-y divide-gray-200">
        {configurations.map((config) => (
          <li 
            key={config.id}
            onClick={() => handleSelectConfig(config)}
            className={`p-4 hover:bg-gray-50 cursor-pointer ${
              selectedConfigId === config.id ? 'bg-blue-50' : ''
            }`}
          >
            <div className="flex justify-between">
              <div>
                <h3 className="font-medium">{config.name}</h3>
                <p className="text-sm text-gray-500">Source: {config.sourceFileName}</p>
              </div>
              <div className="text-right">
                <span className="text-xs font-medium px-2 py-1 rounded-full bg-gray-100">
                  {config.fileType}
                </span>
              </div>
            </div>
            <div className="mt-2">
              <p className="text-xs text-gray-500">
                {config.fields.length} fields ({config.numericFields.length} numeric, {config.categoricalFields.length} categorical)
              </p>
              <p className="text-xs text-gray-500">
                Created: {new Date(config.createdAt).toLocaleString()}
              </p>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default ConfigurationsList;

// src/components/ConfigurationDetail.jsx
import { useState, useEffect } from 'react';
import { getConfiguration } from '../api/reportApi';

const ConfigurationDetail = ({ configId }) => {
  const [config, setConfig] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchConfigDetail = async () => {
      if (!configId) {
        setLoading(false);
        return;
      }
      
      try {
        const data = await getConfiguration(configId);
        setConfig(data);
        setLoading(false);
      } catch (err) {
        setError('Failed to load configuration details');
        setLoading(false);
      }
    };

    setLoading(true);
    fetchConfigDetail();
  }, [configId]);

  if (!configId) return null;
  if (loading) return <div className="text-center py-4">Loading configuration details...</div>;
  if (error) return <div className="text-red-600 py-4">{error}</div>;
  if (!config) return null;

  return (
    <div className="bg-white rounded-lg shadow overflow-hidden">
      <div className="p-4 border-b">
        <h2 className="text-lg font-medium">{config.name} - Configuration Details</h2>
        <p className="text-sm text-gray-500">File: {config.sourceFileName}</p>
      </div>
      
      <div className="p-4">
        <h3 className="font-medium mb-2">Fields by Type</h3>
        
        <div className="mb-4">
          <h4 className="text-sm font-medium text-gray-700">Numeric Fields</h4>
          <div className="flex flex-wrap gap-1 mt-1">
            {config.numericFields.map(field => (
              <span key={field} className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs">
                {field}
              </span>
            ))}
            {config.numericFields.length === 0 && (
              <span className="text-sm text-gray-500">No numeric fields detected</span>
            )}
          </div>
        </div>
        
        <div className="mb-4">
          <h4 className="text-sm font-medium text-gray-700">Date Fields</h4>
          <div className="flex flex-wrap gap-1 mt-1">
            {config.dateFields.map(field => (
              <span key={field} className="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs">
                {field}
              </span>
            ))}
            {config.dateFields.length === 0 && (
              <span className="text-sm text-gray-500">No date fields detected</span>
            )}
          </div>
        </div>
        
        <div className="mb-4">
          <h4 className="text-sm font-medium text-gray-700">Categorical Fields</h4>
          <div className="flex flex-wrap gap-1 mt-1">
            {config.categoricalFields.map(field => (
              <span key={field} className="px-2 py-1 bg-purple-100 text-purple-800 rounded-full text-xs">
                {field}
              </span>
            ))}
            {config.categoricalFields.length === 0 && (
              <span className="text-sm text-gray-500">No categorical fields detected</span>
            )}
          </div>
        </div>
        
        {config.timeFields && config.timeFields.length > 0 && (
          <div className="mb-4">
            <h4 className="text-sm font-medium text-gray-700">Time-Related Fields</h4>
            <div className="flex flex-wrap gap-1 mt-1">
              {config.timeFields.map(field => (
                <span key={field} className="px-2 py-1 bg-yellow-100 text-yellow-800 rounded-full text-xs">
                  {field}
                </span>
              ))}
            </div>
          </div>
        )}
      </div>
      
      {config.potentialAggregations && Object.keys(config.potentialAggregations).length > 0 && (
        <div className="p-4 border-t">
          <h3 className="font-medium mb-2">Potential Aggregations</h3>
          <ul className="text-sm">
            {Object.entries(config.potentialAggregations).map(([field, aggs]) => (
              <li key={field} className="mb-1">
                <span className="font-medium">{field}:</span> {aggs.join(', ')}
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

export default ConfigurationDetail;

// src/components/ReportGenerator.jsx
import { useState } from 'react';
import { generateReport } from '../api/reportApi';
import FileUploader from './FileUploader';

const ReportGenerator = ({ configId, onReportGenerated }) => {
  const [generating, setGenerating] = useState(false);
  const [error, setError] = useState('');

  const handleGenerateReport = async (file) => {
    if (!configId) {
      setError('Please select a configuration first');
      return;
    }

    setGenerating(true);
    setError('');
    
    try {
      const report = await generateReport(file, configId);
      onReportGenerated(report);
    } catch (err) {
      setError(err.message || 'Error generating report');
    } finally {
      setGenerating(false);
    }
  };

  return (
    <div className="bg-white rounded-lg shadow p-4">
      <h2 className="text-lg font-medium mb-4">Generate Report</h2>
      
      {!configId ? (
        <p className="text-sm text-gray-500 mb-4">Select a configuration to generate a report</p>
      ) : (
        <p className="text-sm text-gray-500 mb-4">
          Upload a new data file to generate a report using the selected configuration.
        </p>
      )}
      
      <FileUploader 
        onUpload={handleGenerateReport}
        buttonText="Generate Report"
        disabled={!configId || generating}
      />
      
      {error && <p className="mt-2 text-sm text-red-600">{error}</p>}
    </div>
  );
};

export default ReportGenerator;

// src/components/ReportsList.jsx
import { useState, useEffect } from 'react';
import { getReports } from '../api/reportApi';

const ReportsList = ({ onSelectReport }) => {
  const [reports, setReports] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [selectedReportId, setSelectedReportId] = useState(null);

  useEffect(() => {
    const fetchReports = async () => {
      try {
        const data = await getReports();
        setReports(data);
        setLoading(false);
      } catch (err) {
        setError('Failed to load reports');
        setLoading(false);
      }
    };

    fetchReports();
  }, []);

  const handleSelectReport = (report) => {
    setSelectedReportId(report.id);
    onSelectReport(report.id);
  };

  if (loading) return <div className="text-center py-4">Loading reports...</div>;
  if (error) return <div className="text-red-600 py-4">{error}</div>;
  if (reports.length === 0) {
    return (
      <div className="text-center py-6 bg-gray-50 rounded-lg">
        <p className="text-gray-500">No reports available. Generate a report using one of your configurations.</p>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow overflow-hidden">
      <h2 className="text-lg font-medium p-4 border-b">Generated Reports</h2>
      <ul className="divide-y divide-gray-200">
        {reports.map((report) => (
          <li 
            key={report.id}
            onClick={() => handleSelectReport(report)}
            className={`p-4 hover:bg-gray-50 cursor-pointer ${
              selectedReportId === report.id ? 'bg-blue-50' : ''
            }`}
          >
            <div className="flex justify-between">
              <div>
                <h3 className="font-medium">{report.name}</h3>
                <p className="text-sm text-gray-500">Config: {report.configName}</p>
              </div>
              <div className="text-right">
                <p className="text-xs text-gray-500">
                  {new Date(report.createdAt).toLocaleString()}
                </p>
              </div>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default ReportsList;

// src/components/ReportViewer.jsx
import { useState, useEffect } from 'react';
import { getReport } from '../api/reportApi';

const ReportViewer = ({ reportId }) => {
  const [report, setReport] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [activeTab, setActiveTab] = useState('summary');

  useEffect(() => {
    const fetchReportDetail = async () => {
      if (!reportId) {
        setLoading(false);
        return;
      }
      
      try {
        const data = await getReport(reportId);
        setReport(data);
        setLoading(false);
      } catch (err) {
        setError('Failed to load report');
        setLoading(false);
      }
    };

    setLoading(true);
    fetchReportDetail();
  }, [reportId]);

  if (!reportId) return null;
  if (loading) return <div className="text-center py-4">Loading report details...</div>;
  if (error) return <div className="text-red-600 py-4">{error}</div>;
  if (!report) return null;

  return (
    <div className="bg-white rounded-lg shadow overflow-hidden">
      <div className="p-4 border-b">
        <h2 className="text-lg font-medium">Report Details</h2>
        <p className="text-sm text-gray-500">Configuration: {report.configName}</p>
        <p className="text-sm text-gray-500">Generated: {new Date(report.generatedAt).toLocaleString()}</p>
      </div>
      
      <div className="border-b">
        <nav className="flex">
          <button
            className={`px-4 py-2 text-sm font-medium ${
              activeTab === 'summary' ? 'border-b-2 border-blue-500 text-blue-600' : 'text-gray-500'
            }`}
            onClick={() => setActiveTab('summary')}
          >
            Summary
          </button>
          <button
            className={`px-4 py-2 text-sm font-medium ${
              activeTab === 'aggregations' ? 'border-b-2 border-blue-500 text-blue-600' : 'text-gray-500'
            }`}
            onClick={() => setActiveTab('aggregations')}
          >
            Aggregations
          </button>
          <button
            className={`px-4 py-2 text-sm font-medium ${
              activeTab === 'data' ? 'border-b-2 border-blue-500 text-blue-600' : 'text-gray-500'
            }`}
            onClick={() => setActiveTab('data')}
          >
            Data
          </button>
        </nav>
      </div>
      
      <div className="p-4">
        {activeTab === 'summary' && (
          <div>
            <p className="text-gray-700">{report.summary}</p>
            <div className="mt-4 bg-blue-50 p-4 rounded-lg">
              <p className="text-sm text-blue-800">
                <span className="font-medium">Total Records:</span> {report.recordCount}
              </p>
            </div>
          </div>
        )}
        
        {activeTab === 'aggregations' && (
          <div>
            <h3 className="font-medium mb-3">Aggregated Values</h3>
            {Object.keys(report.aggregations).length === 0 ? (
              <p className="text-gray-500">No aggregations available</p>
            ) : (
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Field</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sum</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Average</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Min</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Max</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Count</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {Object.entries(report.aggregations).map(([field, aggs]) => (
                      <tr key={field}>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{field}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{aggs.sum.toLocaleString()}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{aggs.avg.toLocaleString(undefined, { maximumFractionDigits: 2 })}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{aggs.min.toLocaleString()}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{aggs.max.toLocaleString()}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{aggs.count.toLocaleString()}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )}
          </div>
        )}
        
        {activeTab === 'data' && (
          <div>
            <h3 className="font-medium mb-3">Data Records</h3>
            {report.data.length === 0 ? (
              <p className="text-gray-500">No data records available</p>
            ) : (
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      {Object.keys(report.data[0]).map(key => (
                        <th key={key} className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          {key}
                        </th>
                      ))}
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {report.data.slice(0, 100).map((row, idx) => (
                      <tr key={idx}>
                        {Object.values(row).map((value, i) => (
                          <td key={i} className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {value !== null && value !== undefined ? String(value) : '-'}
                          </td>
                        ))}
                      </tr>
                    ))}
                  </tbody>
                </table>
                {report.data.length > 100 && (
                  <p className="mt-2 text-sm text-gray-500 text-center">
                    Showing first 100 of {report.data.length} records
                  </p>
                )}
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default ReportViewer;

// src/components/Dashboard.jsx
import { useState } from 'react';
import FileUploader from './FileUploader';
import ConfigurationsList from './ConfigurationsList';
import ConfigurationDetail from './ConfigurationDetail';
import ReportGenerator from './ReportGenerator';
import ReportsList from './ReportsList';
import ReportViewer from './ReportViewer';
import { uploadReportFile } from '../api/reportApi';

const Dashboard = () => {
  const [selectedConfigId, setSelectedConfigId] = useState(null);
  const [selectedReportId, setSelectedReportId] = useState(null);
  const [activeTab, setActiveTab] = useState('configurations');
  const [recentReport, setRecentReport] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  const handleFileUpload = async (file) => {
    setIsLoading(true);
    setError('');
    
    try {
      const config = await uploadReportFile(file);
      setSelectedConfigId(config.id);
      setActiveTab('configurations');
    } catch (err) {
      setError(err.message || 'Error uploading file');
    } finally {
      setIsLoading(false);
    }
  };

  const handleReportGenerated = (report) => {
    setRecentReport(report);
    setSelectedReportId(report.id);
    setActiveTab('reports');
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <header className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900">Report Learning Dashboard</h1>
        <p className="text-gray-600 mt-2">
          Upload reports, manage configurations, and generate intelligent reports
        </p>
      </header>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* Sidebar */}
        <div className="md:col-span-1 space-y-6">
          <div className="bg-white rounded-lg shadow p-4">
            <h2 className="text-lg font-medium mb-4">Upload New Report</h2>
            <FileUploader 
              onUpload={handleFileUpload} 
              buttonText="Upload and Learn"
            />
            {error && <p className="mt-2 text-sm text-red-600">{error}</p>}
          </div>
          
          <div className="bg-white rounded-lg shadow overflow-hidden">
            <div className="border-b">
              <nav className="flex">
                <button
                  className={`px-4 py-2 text-sm font-medium flex-1 ${
                    activeTab === 'configurations' ? 'border-b-2 border-blue-500 text-blue-600' : 'text-gray-500'
                  }`}
                  onClick={() => setActiveTab('configurations')}
                >
                  Configurations
                </button>
                <button
                  className={`px-4 py-2 text-sm font-medium flex-1 ${
                    activeTab === 'reports' ? 'border-b-2 border-blue-500 text-blue-600' : 'text-gray-500'
                  }`}
                  onClick={() => setActiveTab('reports')}
                >
                  Reports
                </button>
              </nav>
            </div>
            
            <div className="p-4">
              {activeTab === 'configurations' && (
                <ConfigurationsList onSelectConfig={(config) => setSelectedConfigId(config.id)} />
              )}
              
              {activeTab === 'reports' && (
                <ReportsList onSelectReport={setSelectedReportId} />
              )}
            </div>
          </div>
        </div>
        
        {/* Main Content */}
        <div className="md:col-span-2 space-y-6">
          {activeTab === 'configurations' && (
            <>
              <ConfigurationDetail configId={selectedConfigId} />
              {selectedConfigId && (
                <ReportGenerator 
                  configId={selectedConfigId} 
                  onReportGenerated={handleReportGenerated} 
                />
              )}
            </>
          )}
          
          {activeTab === 'reports' && (
            <ReportViewer reportId={selectedReportId || (recentReport && recentReport.id)} />
          )}
        </div>
      </div>
    </div>
  );
};

export default Dashboard;

// src/App.jsx
import Dashboard from './components/Dashboard';

function App() {
  return (
    <div className="min-h-screen bg-gray-100">
      <Dashboard />
    </div>
  );
}

export default App;
