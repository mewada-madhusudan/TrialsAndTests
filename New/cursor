class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.all_tiles = []
        self.username = getpass.getuser()
        self.db = Database("launcher.db")
        self.setWindowTitle("Application Launcher")
        self.setMinimumSize(1200, 720)
        
        # Initialize the rotation angle for the cursor
        self.cursor_rotation = 0
        self.cursor_timer = QTimer()
        self.cursor_timer.timeout.connect(self.update_cursor)
        self.cursor_timer.setInterval(30)
        
        # Create worker thread
        self.worker_thread = QThread()
        self.worker_thread.finished.connect(self.on_refresh_complete)
        
        # Store the base pixmap
        self.create_cursor_pixmap()
        
        # Rest of your initialization code...
        
        refresh_button = QPushButton("‚ü≥")
        refresh_button.setCursor(Qt.CursorShape.PointingHandCursor)
        refresh_button.clicked.connect(self.start_refresh)
        refresh_button.setStyleSheet("""
            QPushButton {
                background-color: transparent;
                border: none;
                color: #6c757d;
                font-size: 18px;
                padding: 5px;
                min-width: 30px;
            }
            QPushButton:hover {
                color: #4a90e2;
            }
        """)

    def create_cursor_pixmap(self):
        """Create the base cursor pixmap"""
        size = 32
        self.cursor_pixmap = QPixmap(size, size)
        self.cursor_pixmap.fill(Qt.GlobalColor.transparent)
        
        painter = QPainter(self.cursor_pixmap)
        painter.setRenderHint(QPainter.RenderHint.Antialiasing)
        
        pen = QPen()
        pen.setColor(QColor("#4a90e2"))
        pen.setWidth(3)
        pen.setCapStyle(Qt.PenCapStyle.RoundCap)
        painter.setPen(pen)
        
        rect = QRectF(4, 4, size-8, size-8)
        painter.drawArc(rect, 0, 300 * 16)
        painter.end()

    def update_cursor(self):
        """Update the rotating cursor"""
        size = 32
        rotated_pixmap = QPixmap(size, size)
        rotated_pixmap.fill(Qt.GlobalColor.transparent)
        
        painter = QPainter(rotated_pixmap)
        painter.setRenderHint(QPainter.RenderHint.Antialiasing)
        
        center = size / 2
        painter.translate(center, center)
        painter.rotate(self.cursor_rotation)
        painter.translate(-center, -center)
        
        painter.drawPixmap(0, 0, self.cursor_pixmap)
        painter.end()
        
        # Update cursor more safely
        cursor = QCursor(rotated_pixmap)
        QApplication.setOverrideCursor(cursor)
        
        self.cursor_rotation = (self.cursor_rotation + 10) % 360

    def start_refresh(self):
        """Start the refresh process with animated cursor"""
        # Prevent multiple refreshes
        if hasattr(self, 'is_refreshing') and self.is_refreshing:
            return
            
        self.is_refreshing = True
        
        # Clear any existing cursors
        while QApplication.overrideCursor():
            QApplication.restoreOverrideCursor()
        
        self.cursor_rotation = 0
        self.cursor_timer.start()
        
        # Use QTimer to perform refresh in the next event loop iteration
        QTimer.singleShot(0, self.perform_refresh)

    def perform_refresh(self):
        """Perform the actual refresh operation"""
        try:
            # Clear search bar
            self.search_bar.clear()
            
            # Reconnect to database
            self.db = Database("launcher.db")
            
            # Reload applications in the main thread
            self.load_applications()
            
        except Exception as e:
            print(f"Error during refresh: {e}")
            
        finally:
            # Signal completion
            self.on_refresh_complete()

    def on_refresh_complete(self):
        """Clean up after refresh is complete"""
        # Stop the cursor animation
        self.cursor_timer.stop()
        
        # Restore normal cursor
        while QApplication.overrideCursor():
            QApplication.restoreOverrideCursor()
        
        # Reset refresh flag
        self.is_refreshing = False

    def closeEvent(self, event):
        """Handle application closure"""
        # Stop any ongoing refresh
        if hasattr(self, 'is_refreshing') and self.is_refreshing:
            self.on_refresh_complete()
        
        # Cleanup cursor
        while QApplication.overrideCursor():
            QApplication.restoreOverrideCursor()
            
        super().closeEvent(event)
